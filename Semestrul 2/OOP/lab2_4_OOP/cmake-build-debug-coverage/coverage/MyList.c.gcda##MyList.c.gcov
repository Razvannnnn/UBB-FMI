        -:    0:Source:C:/Users/razva/Desktop/OOP/lab2_4_OOP/MyList.c
        -:    0:Graph:C:\Users\razva\Desktop\OOP\lab2_4_OOP\cmake-build-debug-coverage\CMakeFiles\lab2_4_OOP.dir\MyList.c.gcno
        -:    0:Data:C:\Users\razva\Desktop\OOP\lab2_4_OOP\cmake-build-debug-coverage\CMakeFiles\lab2_4_OOP.dir\MyList.c.gcda
        -:    0:Runs:1
        -:    1:#include <malloc.h>
        -:    2:#include "MyList.h"
        -:    3:#include "domeniu.h"
        -:    4:
function creazaVector called 19 returned 100% blocks executed 100%
       19:    5:MyList* creazaVector(){
       19:    6:    MyList* lista = (MyList*)malloc(sizeof(MyList));
       19:    7:    lista->dimensiune = 0;
       19:    8:    lista->capacitate = 2;
       19:    9:    lista->elems = (Element*) malloc(lista->capacitate * sizeof(Element));
       19:   10:    return lista;
       19:   10-block  0
        -:   11:}
        -:   12:
function distruge called 19 returned 100% blocks executed 100%
       19:   13:void distruge(MyList* lista){
       19:   14:    free(lista->elems);
       19:   15:    free(lista);
       19:   16:}
        -:   17:
function adauga called 53 returned 100% blocks executed 100%
       53:   18:void adauga(MyList* lista, Element el){
       53:   19:    if (lista->dimensiune == lista->capacitate - 1)
       53:   19-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 35
       18:   20:        redimensionareLista(lista);
       18:   20-block  0
call    0 returned 18
       53:   21:    lista->elems[lista->dimensiune] = el;
       53:   22:    lista->dimensiune += 1;
       53:   23:}
        -:   24:
function redimensionareLista called 18 returned 100% blocks executed 100%
       18:   25:void redimensionareLista(MyList* lista){
       18:   26:    lista->capacitate *= 2;
       18:   27:    lista->elems = realloc(lista->elems, lista->capacitate * sizeof(Element));
       18:   28:}
        -:   29:
function sterge called 4 returned 100% blocks executed 100%
        4:   30:void sterge(MyList* lista, int poz){
        9:   31:    for (int i = poz; i < lista->dimensiune - 1; i ++)
        4:   31-block  0
        9:   31-block  1
branch  0 taken 5
branch  1 taken 4 (fallthrough)
        5:   32:        lista->elems[i] = lista->elems[i + 1];
        5:   32-block  0
        4:   33:    lista->dimensiune--;
        4:   34:}
        -:   35:
function getOferta called 27 returned 100% blocks executed 100%
       27:   36:Element getOferta(MyList lista, int poz) {
       27:   37:    return lista.elems[poz];
       27:   37-block  0
        -:   38:}
        -:   39:
function get called 322 returned 100% blocks executed 100%
      322:   40:Element get(MyList* lista, int poz){
      322:   41:    return lista->elems[poz];
      322:   41-block  0
        -:   42:}
        -:   43:
function size called 208 returned 100% blocks executed 100%
      208:   44:int size(MyList *lista){
      208:   45:    return lista->dimensiune;
      208:   45-block  0
        -:   46:}
        -:   47:
function copyList called 1 returned 100% blocks executed 100%
        1:   48:MyList* copyList(MyList* lista){
        1:   49:    MyList* copy = creazaVector();
        1:   49-block  0
call    0 returned 1
        3:   50:    for (int i = 0; i < lista->dimensiune; i ++)
        3:   50-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:   51:        adauga(copy, lista->elems[i]);
        2:   51-block  0
call    0 returned 2
        1:   52:    return copy;
        1:   52-block  0
        -:   53:}
