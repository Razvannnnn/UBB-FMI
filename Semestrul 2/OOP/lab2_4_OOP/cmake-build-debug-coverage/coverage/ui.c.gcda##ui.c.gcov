        -:    0:Source:C:/Users/razva/Desktop/OOP/lab2_4_OOP/ui.c
        -:    0:Graph:C:\Users\razva\Desktop\OOP\lab2_4_OOP\cmake-build-debug-coverage\CMakeFiles\lab2_4_OOP.dir\ui.c.gcno
        -:    0:Data:C:\Users\razva\Desktop\OOP\lab2_4_OOP\cmake-build-debug-coverage\CMakeFiles\lab2_4_OOP.dir\ui.c.gcda
        -:    0:Runs:1
        -:    1:#include "ui.h"
        -:    2:#include <stdio.h>
        -:    3:#include <malloc.h>
        -:    4:
        -:    5:
function print_main_menu called 1 returned 100% blocks executed 100%
        1:    6:void print_main_menu(){
        1:    7:    printf("\nMENIUL PRINCIPAL\n");
        1:    7-block  0
call    0 returned 1
        1:    8:    printf("\n1. Adaugare oferta:");
call    0 returned 1
        1:    9:    printf("\n2. Actulizare oferta:");
call    0 returned 1
        1:   10:    printf("\n3. Stergere oferta:");
call    0 returned 1
        1:   11:    printf("\n4. Ordonare dupa pret, tip:");
call    0 returned 1
        1:   12:    printf("\n5. Filtrare dupa un criteriu:");
call    0 returned 1
        1:   13:    printf("\n6. Undo:");
call    0 returned 1
        1:   14:    printf("\n7. Filtrare suma minima:");
call    0 returned 1
        1:   15:    printf("\n0. Exit:");
call    0 returned 1
        1:   16:}
        -:   17:
function afisare_oferta called 0 returned 0% blocks executed 0%
    #####:   18:void afisare_oferta(struct Oferta oferta){
    #####:   19:    printf("\n\nID: %d \nTip: %s \nAdresa: %s \nSuprafata: %d \nPret: %d", oferta.id, oferta.tip, oferta.adresa, oferta.suprefata, oferta.pret);
    %%%%%:   19-block  0
call    0 never executed
        -:   20:
    #####:   21:}
        -:   22:
function read_char called 0 returned 0% blocks executed 0%
    #####:   23:void read_char(char mesaj[], char text[]){
    #####:   24:    printf("%s", mesaj);
    %%%%%:   24-block  0
call    0 never executed
    #####:   25:    scanf("%s", text);
call    0 never executed
    #####:   26:}
        -:   27:
function read_int called 1 returned 100% blocks executed 55%
        1:   28:int read_int(char mesaj[]){
        -:   29:    int alege;
        -:   30:
    #####:   31:    while (1){
    %%%%%:   31-block  0
        1:   32:        printf("%s", mesaj);
        1:   32-block  0
call    0 returned 1
        1:   33:        int v = scanf("%d", &alege);
call    0 returned 1
        -:   34:
        1:   35:        if (v == 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   36:            break;
        1:   36-block  0
        -:   37:        else{
    #####:   38:            printf("\nNu ai introdus un numar intreg!\n");
    %%%%%:   38-block  0
call    0 never executed
    #####:   39:            while (getchar() != '\n');
    %%%%%:   39-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -:   40:        }
        -:   41:    }
        -:   42:
        1:   43:    return alege;
        1:   43-block  0
        -:   44:}
        -:   45:
function adaugare_oferta_ui called 0 returned 0% blocks executed 0%
    #####:   46:void adaugare_oferta_ui(MyList* repo, MyList* undolist){
    #####:   47:    int id = read_int("\nIntroduce id:");
    %%%%%:   47-block  0
call    0 never executed
        -:   48:    char tip[40], adresa[50];
    #####:   49:    read_char("\nIntroduce tipul:", tip);
call    0 never executed
    #####:   50:    read_char("\nIntroduce adresa:", adresa);
call    0 never executed
    #####:   51:    int suprafata = read_int("\nIntroduce suprafata:");
call    0 never executed
    #####:   52:    int pret = read_int("\nIntrodece pretul:");
call    0 never executed
        -:   53:
    #####:   54:    adaugareOferte(repo, undolist, id, tip, adresa, suprafata, pret);
call    0 never executed
    #####:   55:}
        -:   56:
function acatualizare_oferta called 0 returned 0% blocks executed 0%
    #####:   57:void acatualizare_oferta(MyList* repo, MyList* undolist){
    #####:   58:    int id = read_int("\nIntroduce id:");
    %%%%%:   58-block  0
call    0 never executed
        -:   59:    char tip[40], adresa[50];
    #####:   60:    read_char("\nIntroduce tipul:", tip);
call    0 never executed
    #####:   61:    read_char("\nIntroduce adresa:", adresa);
call    0 never executed
    #####:   62:    int suprafata = read_int("\nIntroduce suprafata:");
call    0 never executed
    #####:   63:    int pret = read_int("\nIntrodece pretul:");
call    0 never executed
        -:   64:
    #####:   65:    modificareOferta(repo, undolist, id, tip, adresa, suprafata, pret);
call    0 never executed
    #####:   66:}
        -:   67:
function stergere_oferta_ui called 0 returned 0% blocks executed 0%
    #####:   68:void stergere_oferta_ui(MyList* repo, MyList* undolist){
    #####:   69:    int id = read_int("\nIntroduce id:");
    %%%%%:   69-block  0
call    0 never executed
    #####:   70:    stergereOferta(repo, undolist, id);
call    0 never executed
    #####:   71:}
        -:   72:
function ordonare called 0 returned 0% blocks executed 0%
    #####:   73:void ordonare(MyList* repo){
    #####:   74:    printf("\n1.Crescator: \n2.Descrescator:");
    %%%%%:   74-block  0
call    0 never executed
    #####:   75:    int alege = 1;
    #####:   76:    scanf("%d", &alege);
call    0 never executed
    #####:   77:    int dim; Dim(repo, &dim);
call    0 never executed
    #####:   78:    struct Oferta* lista = (struct Oferta*)malloc(dim * sizeof(struct Oferta));
    #####:   79:    if (alege == 1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   80:        printf("\n1.Selection sort: \n2.Bubble sort:");
    %%%%%:   80-block  0
call    0 never executed
    #####:   81:        int sort = 1;
    #####:   82:        scanf("%d", &sort);
call    0 never executed
    #####:   83:        if (sort == 1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   84:            odonareOferteDupaPretTip(repo, lista, sort_cresc_verif);
    %%%%%:   84-block  0
call    0 never executed
    #####:   85:            for (int i = 0; i < dim; i ++)
    %%%%%:   85-block  0
branch  0 never executed
branch  1 never executed
    #####:   86:                afisare_oferta(lista[i]);
    %%%%%:   86-block  0
call    0 never executed
        -:   87:        }
    #####:   88:        else if(sort == 2) {
    %%%%%:   88-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   89:            ordonareBubble(repo, lista, sort_cresc_verif);
    %%%%%:   89-block  0
call    0 never executed
    #####:   90:            for (int i = 0; i < dim; i ++)
    %%%%%:   90-block  0
branch  0 never executed
branch  1 never executed
    #####:   91:                afisare_oferta(lista[i]);
    %%%%%:   91-block  0
call    0 never executed
        -:   92:        }
    #####:   93:        else printf("Optiune invalida!\n");
    %%%%%:   93-block  0
call    0 never executed
        -:   94:    }
    #####:   95:    else if(alege ==2) {
    %%%%%:   95-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   96:        printf("\n1.Selection sort: \n2.Bubble sort:");
    %%%%%:   96-block  0
call    0 never executed
    #####:   97:        int sort = 1;
    #####:   98:        scanf("%d", &sort);
call    0 never executed
    #####:   99:        if (sort == 1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  100:            odonareOferteDupaPretTip(repo, lista, sort_descresc_verif);
    %%%%%:  100-block  0
call    0 never executed
    #####:  101:            for (int i = 0; i < dim; i ++)
    %%%%%:  101-block  0
branch  0 never executed
branch  1 never executed
    #####:  102:                afisare_oferta(lista[i]);
    %%%%%:  102-block  0
call    0 never executed
        -:  103:        }
    #####:  104:        else if (sort == 2) {
    %%%%%:  104-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  105:            ordonareBubble(repo, lista, sort_descresc_verif);
    %%%%%:  105-block  0
call    0 never executed
    #####:  106:            for (int i = 0; i < dim; i ++)
    %%%%%:  106-block  0
branch  0 never executed
branch  1 never executed
    #####:  107:                afisare_oferta(lista[i]);
    %%%%%:  107-block  0
call    0 never executed
        -:  108:        }
    #####:  109:        else printf("Optiune invalida!\n");
    %%%%%:  109-block  0
call    0 never executed
        -:  110:    }
    #####:  111:    else printf("Optiune invalida!\n");
    %%%%%:  111-block  0
call    0 never executed
    #####:  112:    free(lista);
    #####:  113:}
        -:  114:
function filtrare called 0 returned 0% blocks executed 0%
    #####:  115:void filtrare(MyList* repo){
    #####:  116:    printf("1.Suprafata: \n2.Tip: \n3.Pret: ");
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:    int alege = 1;
    #####:  118:    scanf("%d", &alege);
call    0 never executed
    #####:  119:    int dim; Dim(repo, &dim);
call    0 never executed
    #####:  120:    struct Oferta* lista = (struct Oferta*)malloc(dim * sizeof(struct Oferta));
    #####:  121:    if (alege == 1){
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  122:        int suprafata = read_int("\nIntroduce suprafata:");
    %%%%%:  122-block  0
call    0 never executed
    #####:  123:        filtrareDupaUnCriteriu(repo, lista, &dim, 1, suprafata, "", 0);
call    0 never executed
        -:  124:    }
    #####:  125:    else if (alege == 2){
    %%%%%:  125-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  126:        char tip[40];
    #####:  127:        read_char("\nIntroduce tipul:", tip);
    %%%%%:  127-block  0
call    0 never executed
    #####:  128:        filtrareDupaUnCriteriu(repo, lista, &dim, 2, 0, tip, 0);
call    0 never executed
        -:  129:    }
    #####:  130:    else if (alege == 3){
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  131:        int pret = read_int("\nIntroduce pretul:");
    %%%%%:  131-block  0
call    0 never executed
    #####:  132:        filtrareDupaUnCriteriu(repo, lista, &dim, 3, 0, "", pret);
call    0 never executed
        -:  133:    }
    #####:  134:    for (int i = 0; i < dim; i ++)
    %%%%%:  134-block  0
    %%%%%:  134-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  135:        afisare_oferta(lista[i]);
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:    free(lista);
    #####:  137:}
        -:  138:
function filtrareNoua_ui called 0 returned 0% blocks executed 0%
    #####:  139:void filtrareNoua_ui(MyList* repo) {
        -:  140:    int dim;
    #####:  141:    Dim(repo, &dim);
    %%%%%:  141-block  0
call    0 never executed
    #####:  142:    struct Oferta* lista = (struct Oferta*)malloc(dim * sizeof (struct Oferta));
        -:  143:    int pret;
    #####:  144:    pret = read_int("\nPretul minim:");
call    0 never executed
    #####:  145:    filtrareNoua(repo, lista, &dim, pret);
call    0 never executed
    #####:  146:    for (int i = 0; i < dim; i ++)
    %%%%%:  146-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  147:        afisare_oferta(lista[i]);
    %%%%%:  147-block  0
call    0 never executed
    #####:  148:    free(lista);
    #####:  149:}
        -:  150:
function undo called 0 returned 0% blocks executed 0%
    #####:  151:MyList* undo(MyList* repo, MyList* undolist) {
    #####:  152:    if(undolist->dimensiune == 0) {
    %%%%%:  152-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  153:        printf("Nu se mai poate efectua undo!\n");
    %%%%%:  153-block  0
call    0 never executed
        -:  154:    }
        -:  155:    else {
    #####:  156:        repo = get(undolist, undolist->dimensiune-1);
    %%%%%:  156-block  0
call    0 never executed
    #####:  157:        sterge(undolist, undolist->dimensiune-1);
call    0 never executed
    #####:  158:        printf("Undo s-a efectuat!\n");
call    0 never executed
        -:  159:    }
    #####:  160:    return repo;
    %%%%%:  160-block  0
        -:  161:}
        -:  162:
function main_menu called 1 returned 100% blocks executed 70%
        1:  163:void main_menu(MyList* repo, MyList* undolist) {
        1:  164:    int terminaat = 1;
        2:  165:    while (terminaat) {
        1:  165-block  0
        2:  165-block  1
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:  166:        print_main_menu();
        1:  166-block  0
call    0 returned 1
        1:  167:        int alege = read_int("\nAlege optiunea:");
call    0 returned 1
        -:  168:
        1:  169:        if (alege == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  170:            adaugare_oferta_ui(repo, undolist);
    %%%%%:  170-block  0
call    0 never executed
        1:  171:        else if (alege == 2)
        1:  171-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  172:            acatualizare_oferta(repo, undolist);
    %%%%%:  172-block  0
call    0 never executed
        1:  173:        else if (alege == 3)
        1:  173-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  174:            stergere_oferta_ui(repo, undolist);
    %%%%%:  174-block  0
call    0 never executed
        1:  175:        else if (alege == 4)
        1:  175-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  176:            ordonare(repo);
    %%%%%:  176-block  0
call    0 never executed
        1:  177:        else if (alege == 5)
        1:  177-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  178:            filtrare(repo);
    %%%%%:  178-block  0
call    0 never executed
        1:  179:        else if (alege == 6)
        1:  179-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  180:            repo = undo(repo, undolist);
    %%%%%:  180-block  0
call    0 never executed
        1:  181:        else if (alege == 7)
        1:  181-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  182:            filtrareNoua_ui(repo);
    %%%%%:  182-block  0
call    0 never executed
        1:  183:        else if (alege == 0)
        1:  183-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  184:            terminaat = 0;
        1:  184-block  0
        -:  185:    }
        1:  186:    distrugeLista(repo);
        1:  186-block  0
call    0 returned 1
        1:  187:    distrugeListaUndo(undolist);
call    0 returned 1
        1:  188:}
