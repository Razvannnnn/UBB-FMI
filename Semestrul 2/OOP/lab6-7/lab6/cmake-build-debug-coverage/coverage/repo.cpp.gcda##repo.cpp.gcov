        -:    0:Source:C:/Users/razva/Desktop/OOP/lab6/repo.cpp
        -:    0:Graph:C:\Users\razva\Desktop\OOP\lab6\cmake-build-debug-coverage\CMakeFiles\lab6.dir\repo.cpp.gcno
        -:    0:Data:C:\Users\razva\Desktop\OOP\lab6\cmake-build-debug-coverage\CMakeFiles\lab6.dir\repo.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "repo.h"
        -:    2:#include <cassert>
        -:    3:
function _ZN10RepoProdus5storeERK6Produs called 37 returned 97% blocks executed 58%
       37:    4:void RepoProdus::store(const Produs &produs) {
       59:    5:    for(const Produs& p : produse) {
       37:    5-block  0
call    0 returned 37
branch  1 taken 37 (fallthrough)
branch  2 taken 0 (throw)
       37:    5-block  1
call    3 returned 37
branch  4 taken 37 (fallthrough)
branch  5 taken 0 (throw)
       37:    5-block  2
       23:    5-block  3
call    6 returned 23
branch  7 taken 23 (fallthrough)
branch  8 taken 0 (throw)
       22:    5-block  4
call    9 returned 22
branch 10 taken 22 (fallthrough)
branch 11 taken 0 (throw)
       59:    5-block  5
call   12 returned 59
branch 13 taken 59 (fallthrough)
branch 14 taken 0 (throw)
       59:    5-block  6
branch 15 taken 23
branch 16 taken 36 (fallthrough)
       23:    6:        if(p.getNume() == produs.getNume() && p.getProducator() == produs.getProducator() && p.getTip() == produs.getTip()) {
       23:    6-block  0
call    0 returned 23
branch  1 taken 23 (fallthrough)
branch  2 taken 0 (throw)
       23:    6-block  1
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
       23:    6-block  2
call    6 returned 23
branch  7 taken 21 (fallthrough)
branch  8 taken 2
       21:    6-block  3
call    9 returned 21
branch 10 taken 21 (fallthrough)
branch 11 taken 0 (throw)
       21:    6-block  4
call   12 returned 21
branch 13 taken 21 (fallthrough)
branch 14 taken 0 (throw)
       21:    6-block  5
call   15 returned 21
branch 16 taken 8 (fallthrough)
branch 17 taken 13
        8:    6-block  6
call   18 returned 8
branch 19 taken 8 (fallthrough)
branch 20 taken 0 (throw)
        8:    6-block  7
call   21 returned 8
branch 22 taken 8 (fallthrough)
branch 23 taken 0 (throw)
        8:    6-block  8
call   24 returned 8
branch 25 taken 1 (fallthrough)
branch 26 taken 7
        1:    6-block  9
       22:    6-block 10
       23:    6-block 11
branch 27 taken 8 (fallthrough)
branch 28 taken 15
        8:    6-block 12
call   29 returned 8
       23:    6-block 13
branch 30 taken 8 (fallthrough)
branch 31 taken 15
        8:    6-block 14
call   32 returned 8
       23:    6-block 15
branch 33 taken 21 (fallthrough)
branch 34 taken 2
       21:    6-block 16
call   35 returned 21
       23:    6-block 17
branch 36 taken 21 (fallthrough)
branch 37 taken 2
       21:    6-block 18
call   38 returned 21
       23:    6-block 19
branch 39 taken 23 (fallthrough)
branch 40 taken 0
       23:    6-block 20
call   41 returned 23
       23:    6-block 21
branch 42 taken 23 (fallthrough)
branch 43 taken 0
       23:    6-block 22
call   44 returned 23
       23:    6-block 23
branch 45 taken 1 (fallthrough)
branch 46 taken 22
    $$$$$:    6-block 24
branch 47 never executed (fallthrough)
branch 48 never executed
    $$$$$:    6-block 25
call   49 never executed
    $$$$$:    6-block 26
    $$$$$:    6-block 27
branch 50 never executed (fallthrough)
branch 51 never executed
    $$$$$:    6-block 28
call   52 never executed
    $$$$$:    6-block 29
    $$$$$:    6-block 30
branch 53 never executed (fallthrough)
branch 54 never executed
    $$$$$:    6-block 31
call   55 never executed
    $$$$$:    6-block 32
    $$$$$:    6-block 33
branch 56 never executed (fallthrough)
branch 57 never executed
    $$$$$:    6-block 34
call   58 never executed
    $$$$$:    6-block 35
    $$$$$:    6-block 36
branch 59 never executed (fallthrough)
branch 60 never executed
    $$$$$:    6-block 37
call   61 never executed
    $$$$$:    6-block 38
    $$$$$:    6-block 39
branch 62 never executed (fallthrough)
branch 63 never executed
    $$$$$:    6-block 40
call   64 never executed
    $$$$$:    6-block 41
        3:    7:            throw RepoException("Produsul deja exista!\n");
        1:    7-block  0
call    0 returned 1
        1:    7-block  1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:    7-block  2
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:    7-block  3
call    7 returned 1
call    8 returned 1
    $$$$$:    7-block  4
call    9 never executed
    $$$$$:    7-block  5
    $$$$$:    7-block  6
    $$$$$:    7-block  7
call   10 never executed
        -:    8:        }
        -:    9:    }
       36:   10:    produse.push_back(produs);
       36:   10-block  0
call    0 returned 36
       36:   11:}
        -:   12:
function _ZN10RepoProdus6modifyER6ProdusS1_ called 3 returned 67% blocks executed 59%
        3:   13:void RepoProdus::modify(Produs &produs, Produs& produsNou) {
        3:   14:    int ok=0;
        6:   15:    for(Produs& p : produse) {
        3:   15-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   15-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:   15-block  2
        3:   15-block  3
call    6 returned 3
branch  7 taken 3 (fallthrough)
branch  8 taken 0 (throw)
        3:   15-block  4
call    9 returned 3
branch 10 taken 3 (fallthrough)
branch 11 taken 0 (throw)
        6:   15-block  5
call   12 returned 6
branch 13 taken 6 (fallthrough)
branch 14 taken 0 (throw)
        6:   15-block  6
branch 15 taken 3
branch 16 taken 3 (fallthrough)
        3:   16:        if(p.getNume() == produs.getNume() && p.getTip() == produs.getTip() && p.getProducator() == produs.getProducator() && p.getPret() == produs.getPret()) {
        3:   16-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   16-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:   16-block  2
call    6 returned 3
branch  7 taken 3 (fallthrough)
branch  8 taken 0
        3:   16-block  3
call    9 returned 3
branch 10 taken 3 (fallthrough)
branch 11 taken 0 (throw)
        3:   16-block  4
call   12 returned 3
branch 13 taken 3 (fallthrough)
branch 14 taken 0 (throw)
        3:   16-block  5
call   15 returned 3
branch 16 taken 2 (fallthrough)
branch 17 taken 1
        2:   16-block  6
call   18 returned 2
branch 19 taken 2 (fallthrough)
branch 20 taken 0 (throw)
        2:   16-block  7
call   21 returned 2
branch 22 taken 2 (fallthrough)
branch 23 taken 0 (throw)
        2:   16-block  8
call   24 returned 2
branch 25 taken 2 (fallthrough)
branch 26 taken 0
        2:   16-block  9
call   27 returned 2
branch 28 taken 2 (fallthrough)
branch 29 taken 0 (throw)
        2:   16-block 10
call   30 returned 2
branch 31 taken 2 (fallthrough)
branch 32 taken 0 (throw)
        2:   16-block 11
branch 33 taken 2 (fallthrough)
branch 34 taken 0
        2:   16-block 12
        1:   16-block 13
        3:   16-block 14
branch 35 taken 2 (fallthrough)
branch 36 taken 1
        2:   16-block 15
call   37 returned 2
        3:   16-block 16
branch 38 taken 2 (fallthrough)
branch 39 taken 1
        2:   16-block 17
call   40 returned 2
        3:   16-block 18
branch 41 taken 3 (fallthrough)
branch 42 taken 0
        3:   16-block 19
call   43 returned 3
        3:   16-block 20
branch 44 taken 3 (fallthrough)
branch 45 taken 0
        3:   16-block 21
call   46 returned 3
        3:   16-block 22
branch 47 taken 3 (fallthrough)
branch 48 taken 0
        3:   16-block 23
call   49 returned 3
        3:   16-block 24
branch 50 taken 3 (fallthrough)
branch 51 taken 0
        3:   16-block 25
call   52 returned 3
        3:   16-block 26
branch 53 taken 2 (fallthrough)
branch 54 taken 1
    $$$$$:   16-block 27
branch 55 never executed (fallthrough)
branch 56 never executed
    $$$$$:   16-block 28
call   57 never executed
    $$$$$:   16-block 29
    $$$$$:   16-block 30
branch 58 never executed (fallthrough)
branch 59 never executed
    $$$$$:   16-block 31
call   60 never executed
    $$$$$:   16-block 32
    $$$$$:   16-block 33
branch 61 never executed (fallthrough)
branch 62 never executed
    $$$$$:   16-block 34
call   63 never executed
    $$$$$:   16-block 35
    $$$$$:   16-block 36
branch 64 never executed (fallthrough)
branch 65 never executed
    $$$$$:   16-block 37
call   66 never executed
    $$$$$:   16-block 38
    $$$$$:   16-block 39
branch 67 never executed (fallthrough)
branch 68 never executed
    $$$$$:   16-block 40
call   69 never executed
    $$$$$:   16-block 41
    $$$$$:   16-block 42
branch 70 never executed (fallthrough)
branch 71 never executed
    $$$$$:   16-block 43
call   72 never executed
    $$$$$:   16-block 44
        2:   17:            p.setNume(produsNou.getNume());
        2:   17-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   17-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:   17-block  2
call    6 returned 2
    $$$$$:   17-block  3
call    7 never executed
    $$$$$:   17-block  4
        2:   18:            p.setProducator(produsNou.getProducator());
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   18-block  0
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:   18-block  1
call    6 returned 2
    $$$$$:   18-block  2
call    7 never executed
    $$$$$:   18-block  3
        2:   19:            p.setTip(produsNou.getTip());
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   19-block  0
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:   19-block  1
call    6 returned 2
    $$$$$:   19-block  2
call    7 never executed
    $$$$$:   19-block  3
        2:   20:            p.setPret(produsNou.getPret());
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   20-block  0
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:   21:            ok=1;
        2:   21-block  0
        -:   22:        }
        -:   23:    }
        5:   24:    if(ok == 0) throw RepoException("Produsul nu exista!\n");
        3:   24-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   24-block  1
call    2 returned 1
        1:   24-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   24-block  3
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   24-block  4
call    9 returned 1
call   10 returned 0
    $$$$$:   24-block  5
call   11 never executed
    $$$$$:   24-block  6
    $$$$$:   24-block  7
    $$$$$:   24-block  8
call   12 never executed
        2:   25:}
        2:   25-block  0
        -:   26:
function _ZN10RepoProdus3delERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_ called 3 returned 67% blocks executed 63%
        3:   27:void RepoProdus::del(const std::string& nume, const std::string& tip, const std::string& producator) {
        3:   28:    int ok=0;
       3*:   29:    for(int i=0;i<produse.size();i++) {
        3:   29-block  0
    %%%%%:   29-block  1
        3:   29-block  2
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
       2*:   30:        if(produse[i].getNume() == nume && produse[i].getTip() == tip && produse[i].getProducator() == producator) {
        2:   30-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   30-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0
        2:   30-block  2
call    7 returned 2
call    8 returned 2
branch  9 taken 2 (fallthrough)
branch 10 taken 0 (throw)
        2:   30-block  3
call   11 returned 2
branch 12 taken 2 (fallthrough)
branch 13 taken 0
        2:   30-block  4
call   14 returned 2
call   15 returned 2
branch 16 taken 2 (fallthrough)
branch 17 taken 0 (throw)
        2:   30-block  5
call   18 returned 2
branch 19 taken 2 (fallthrough)
branch 20 taken 0
        2:   30-block  6
    %%%%%:   30-block  7
        2:   30-block  8
branch 21 taken 2 (fallthrough)
branch 22 taken 0
        2:   30-block  9
call   23 returned 2
        2:   30-block 10
branch 24 taken 2 (fallthrough)
branch 25 taken 0
        2:   30-block 11
call   26 returned 2
        2:   30-block 12
branch 27 taken 2 (fallthrough)
branch 28 taken 0
        2:   30-block 13
call   29 returned 2
        2:   30-block 14
branch 30 taken 2 (fallthrough)
branch 31 taken 0
    $$$$$:   30-block 15
branch 32 never executed (fallthrough)
branch 33 never executed
    $$$$$:   30-block 16
call   34 never executed
    $$$$$:   30-block 17
    $$$$$:   30-block 18
branch 35 never executed (fallthrough)
branch 36 never executed
    $$$$$:   30-block 19
call   37 never executed
    $$$$$:   30-block 20
    $$$$$:   30-block 21
branch 38 never executed (fallthrough)
branch 39 never executed
    $$$$$:   30-block 22
call   40 never executed
    $$$$$:   30-block 23
call   41 never executed
        2:   31:            produse.erase(i);
        2:   31-block  0
call    0 returned 2
        2:   32:            ok=1;
        2:   33:            break;
        -:   34:        }
        -:   35:    }
        5:   36:    if(ok==0) throw RepoException("Produsul nu exista!\n");
        3:   36-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   36-block  1
call    2 returned 1
        1:   36-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   36-block  3
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   36-block  4
call    9 returned 1
call   10 returned 0
    $$$$$:   36-block  5
call   11 never executed
    $$$$$:   36-block  6
    $$$$$:   36-block  7
    $$$$$:   36-block  8
call   12 never executed
        2:   37:}
        2:   37-block  0
        -:   38:
function _ZN10RepoProdus5cautaERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_ called 3 returned 67% blocks executed 65%
        3:   39:Produs RepoProdus::cauta(const std::string& nume, const std::string& tip, const std::string& producator) {
        4:   40:    for(const Produs& p : produse) {
        3:   40-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   40-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:   40-block  2
        3:   40-block  3
call    6 returned 3
branch  7 taken 3 (fallthrough)
branch  8 taken 0 (throw)
        1:   40-block  4
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        4:   40-block  5
call   12 returned 4
branch 13 taken 4 (fallthrough)
branch 14 taken 0 (throw)
        4:   40-block  6
branch 15 taken 3
branch 16 taken 1 (fallthrough)
        3:   41:        if(p.getNume() == nume && p.getProducator() == producator && p.getTip() == tip) {
        3:   41-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   41-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        3:   41-block  2
call    6 returned 3
branch  7 taken 3 (fallthrough)
branch  8 taken 0 (throw)
        3:   41-block  3
call    9 returned 3
branch 10 taken 2 (fallthrough)
branch 11 taken 1
        2:   41-block  4
call   12 returned 2
branch 13 taken 2 (fallthrough)
branch 14 taken 0 (throw)
        2:   41-block  5
call   15 returned 2
branch 16 taken 2 (fallthrough)
branch 17 taken 0
        2:   41-block  6
        1:   41-block  7
        3:   41-block  8
branch 18 taken 2 (fallthrough)
branch 19 taken 1
        2:   41-block  9
call   20 returned 2
        3:   41-block 10
branch 21 taken 3 (fallthrough)
branch 22 taken 0
        3:   41-block 11
call   23 returned 3
        3:   41-block 12
branch 24 taken 3 (fallthrough)
branch 25 taken 0
        3:   41-block 13
call   26 returned 3
        3:   41-block 14
branch 27 taken 2 (fallthrough)
branch 28 taken 1
    $$$$$:   41-block 15
branch 29 never executed (fallthrough)
branch 30 never executed
    $$$$$:   41-block 16
call   31 never executed
    $$$$$:   41-block 17
    $$$$$:   41-block 18
branch 32 never executed (fallthrough)
branch 33 never executed
    $$$$$:   41-block 19
call   34 never executed
    $$$$$:   41-block 20
    $$$$$:   41-block 21
branch 35 never executed (fallthrough)
branch 36 never executed
    $$$$$:   41-block 22
call   37 never executed
    $$$$$:   41-block 23
        2:   42:            return p;
        2:   42-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   42-block  1
        2:   42-block  2
        -:   43:        }
        -:   44:    }
        3:   45:    throw RepoException("Produsul nu exista!\n");
        1:   45-block  0
call    0 returned 1
        1:   45-block  1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   45-block  2
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:   45-block  3
call    7 returned 1
call    8 returned 0
    $$$$$:   45-block  4
call    9 never executed
    $$$$$:   45-block  5
    $$$$$:   45-block  6
    $$$$$:   45-block  7
call   10 never executed
        -:   46:}
        -:   47:
function _ZN10RepoProdus7sortareERS_ii called 7 returned 100% blocks executed 73%
        7:   48:void RepoProdus::sortare(RepoProdus &produseSortate, int criteriu, int mod) {
        7:   49:    if(mod == 1) {
        7:   49-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 3
        4:   50:        if(criteriu == 1) {
        4:   50-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:   51:            int ok = 0;
        3:   52:            while(ok == 0) {
        1:   52-block  0
        3:   52-block  1
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:   53:                ok = 1;
        6:   54:                for(int i=0;i<produseSortate.produse.size()-1;i++) {
        2:   54-block  0
        4:   54-block  1
        6:   54-block  2
call    0 returned 6
branch  1 taken 4
branch  2 taken 2 (fallthrough)
        4:   55:                    if(produseSortate.produse[i].getNume() > produseSortate.produse[i+1].getNume()) {
        4:   55-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:   55-block  1
call    4 returned 4
call    5 returned 4
branch  6 taken 4 (fallthrough)
branch  7 taken 0 (throw)
        4:   55-block  2
call    8 returned 4
call    9 returned 4
call   10 returned 4
branch 11 taken 1 (fallthrough)
branch 12 taken 3
    $$$$$:   55-block  3
    $$$$$:   55-block  4
call   13 never executed
    $$$$$:   55-block  5
call   14 never executed
        1:   56:                        Produs aux = produseSortate.produse[i];
        1:   56-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   57:                        produseSortate.produse[i] = produseSortate.produse[i+1];
        1:   57-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   58:                        produseSortate.produse[i+1] = aux;
        1:   58-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   59:                        ok = 0;
        1:   60:                    }
        1:   60-block  0
call    0 returned 1
    $$$$$:   60-block  1
call    1 never executed
        -:   61:                }
        -:   62:            }
        -:   63:        }
        4:   64:        if(criteriu == 2) {
        4:   64-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:   65:            int ok = 0;
        6:   66:            while(ok == 0) {
        2:   66-block  0
        6:   66-block  1
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        4:   67:                ok = 1;
       12:   68:                for(int i=0;i<produseSortate.produse.size()-1;i++) {
        4:   68-block  0
        8:   68-block  1
       12:   68-block  2
call    0 returned 12
branch  1 taken 8
branch  2 taken 4 (fallthrough)
        8:   69:                    if(produseSortate.produse[i].getPret() > produseSortate.produse[i+1].getPret()) {
        8:   69-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
branch  4 taken 3 (fallthrough)
branch  5 taken 5
        3:   70:                        Produs aux = produseSortate.produse[i];
        3:   70-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   71:                        produseSortate.produse[i] = produseSortate.produse[i+1];
        3:   71-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3:   72:                        produseSortate.produse[i+1] = aux;
        3:   72-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   73:                        ok = 0;
        3:   74:                    }
        3:   74-block  0
call    0 returned 3
    $$$$$:   74-block  1
call    1 never executed
        -:   75:                }
        -:   76:            }
        -:   77:        }
        4:   78:        if(criteriu == 3) {
        4:   78-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:   79:            int ok = 0;
        4:   80:            while(ok == 0) {
        1:   80-block  0
        4:   80-block  1
branch  0 taken 3
branch  1 taken 1
        3:   81:                ok = 1;
        9:   82:                for(int i=0;i<produseSortate.produse.size()-1;i++) {
        3:   82-block  0
        6:   82-block  1
        9:   82-block  2
call    0 returned 9
branch  1 taken 6
branch  2 taken 3 (fallthrough)
       14:   83:                    if((produseSortate.produse[i].getNume() > produseSortate.produse[i+1].getNume()) || (produseSortate.produse[i].getNume() == produseSortate.produse[i+1].getNume() &&
        6:   83-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:   83-block  1
call    4 returned 6
call    5 returned 6
branch  6 taken 6 (fallthrough)
branch  7 taken 0 (throw)
        6:   83-block  2
call    8 returned 6
branch  9 taken 5 (fallthrough)
branch 10 taken 1
        5:   83-block  3
call   11 returned 5
call   12 returned 5
branch 13 taken 5 (fallthrough)
branch 14 taken 0 (throw)
        5:   83-block  4
call   15 returned 5
call   16 returned 5
branch 17 taken 5 (fallthrough)
branch 18 taken 0 (throw)
        5:   83-block  5
call   19 returned 5
branch 20 taken 2 (fallthrough)
branch 21 taken 3
branch 22 taken 1 (fallthrough)
branch 23 taken 1
        2:   83-block  6
        4:   83-block  7
        5:   83-block  8
call   24 returned 5
        6:   83-block  9
branch 25 taken 5 (fallthrough)
branch 26 taken 1
        5:   83-block 10
call   27 returned 5
        6:   83-block 11
branch 28 taken 6 (fallthrough)
branch 29 taken 0
        6:   83-block 12
call   30 returned 6
        6:   83-block 13
branch 31 taken 6 (fallthrough)
branch 32 taken 0
        6:   83-block 14
call   33 returned 6
        6:   83-block 15
branch 34 taken 2 (fallthrough)
branch 35 taken 4
    $$$$$:   83-block 16
branch 36 never executed (fallthrough)
branch 37 never executed
    $$$$$:   83-block 17
call   38 never executed
    $$$$$:   83-block 18
    $$$$$:   83-block 19
branch 39 never executed (fallthrough)
branch 40 never executed
    $$$$$:   83-block 20
call   41 never executed
    $$$$$:   83-block 21
    $$$$$:   83-block 22
branch 42 never executed (fallthrough)
branch 43 never executed
    $$$$$:   83-block 23
call   44 never executed
    $$$$$:   83-block 24
    $$$$$:   83-block 25
branch 45 never executed (fallthrough)
branch 46 never executed
    $$$$$:   83-block 26
call   47 never executed
    $$$$$:   83-block 27
call   48 never executed
        8:   84:                                                                                                         produseSortate.produse[i].getTip() > produseSortate.produse[i+1].getTip())) {
        2:   84-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   84-block  1
call    4 returned 2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
        2:   84-block  2
call    8 returned 2
        6:   84-block  3
branch  9 taken 2 (fallthrough)
branch 10 taken 4
        2:   84-block  4
call   11 returned 2
        6:   84-block  5
branch 12 taken 2 (fallthrough)
branch 13 taken 4
        2:   84-block  6
call   14 returned 2
        6:   84-block  7
branch 15 taken 5 (fallthrough)
branch 16 taken 1
    $$$$$:   84-block  8
branch 17 never executed (fallthrough)
branch 18 never executed
    $$$$$:   84-block  9
call   19 never executed
    $$$$$:   84-block 10
    $$$$$:   84-block 11
branch 20 never executed (fallthrough)
branch 21 never executed
    $$$$$:   84-block 12
call   22 never executed
    $$$$$:   84-block 13
        2:   85:                        Produs aux = produseSortate.produse[i];
        2:   85-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   86:                        produseSortate.produse[i] = produseSortate.produse[i+1];
        2:   86-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:   87:                        produseSortate.produse[i+1] = aux;
        2:   87-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   88:                        ok = 0;
        2:   89:                    }
        2:   89-block  0
call    0 returned 2
    $$$$$:   89-block  1
call    1 never executed
        -:   90:                }
        -:   91:            }
        -:   92:        }
        -:   93:    } else {
        3:   94:        if(criteriu == 1) {
        3:   94-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   95:            int ok = 0;
        4:   96:            while(ok == 0) {
        1:   96-block  0
        4:   96-block  1
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:   97:                ok = 1;
        9:   98:                for(int i=0;i<produseSortate.produse.size()-1;i++) {
        3:   98-block  0
        6:   98-block  1
        9:   98-block  2
call    0 returned 9
branch  1 taken 6
branch  2 taken 3 (fallthrough)
        6:   99:                    if(produseSortate.produse[i].getNume() < produseSortate.produse[i+1].getNume()) {
        6:   99-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:   99-block  1
call    4 returned 6
call    5 returned 6
branch  6 taken 6 (fallthrough)
branch  7 taken 0 (throw)
        6:   99-block  2
call    8 returned 6
call    9 returned 6
call   10 returned 6
branch 11 taken 2 (fallthrough)
branch 12 taken 4
    $$$$$:   99-block  3
    $$$$$:   99-block  4
call   13 never executed
    $$$$$:   99-block  5
call   14 never executed
        2:  100:                        Produs aux = produseSortate.produse[i];
        2:  100-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  101:                        produseSortate.produse[i] = produseSortate.produse[i+1];
        2:  101-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:  102:                        produseSortate.produse[i+1] = aux;
        2:  102-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  103:                        ok = 0;
        2:  104:                    }
        2:  104-block  0
call    0 returned 2
    $$$$$:  104-block  1
call    1 never executed
        -:  105:                }
        -:  106:            }
        -:  107:        }
        3:  108:        if(criteriu == 2) {
        3:  108-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  109:            int ok = 0;
        3:  110:            while(ok == 0) {
        1:  110-block  0
        3:  110-block  1
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:  111:                ok = 1;
        6:  112:                for(int i=0;i<produseSortate.produse.size()-1;i++) {
        2:  112-block  0
        4:  112-block  1
        6:  112-block  2
call    0 returned 6
branch  1 taken 4
branch  2 taken 2 (fallthrough)
        4:  113:                    if(produseSortate.produse[i].getPret() < produseSortate.produse[i+1].getPret()) {
        4:  113-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
call    3 returned 4
branch  4 taken 1 (fallthrough)
branch  5 taken 3
        1:  114:                        Produs aux = produseSortate.produse[i];
        1:  114-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  115:                        produseSortate.produse[i] = produseSortate.produse[i+1];
        1:  115-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  116:                        produseSortate.produse[i+1] = aux;
        1:  116-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  117:                        ok = 0;
        1:  118:                    }
        1:  118-block  0
call    0 returned 1
    $$$$$:  118-block  1
call    1 never executed
        -:  119:                }
        -:  120:            }
        -:  121:        }
        3:  122:        if(criteriu == 3) {
        3:  122-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  123:            int ok = 0;
        3:  124:            while(ok == 0) {
        1:  124-block  0
        3:  124-block  1
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:  125:                ok = 1;
        6:  126:                for(int i=0;i<produseSortate.produse.size()-1;i++) {
        2:  126-block  0
        4:  126-block  1
        6:  126-block  2
call    0 returned 6
branch  1 taken 4
branch  2 taken 2 (fallthrough)
       10:  127:                    if((produseSortate.produse[i].getNume() < produseSortate.produse[i+1].getNume()) || (produseSortate.produse[i].getNume() == produseSortate.produse[i+1].getNume() &&
        4:  127-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:  127-block  1
call    4 returned 4
call    5 returned 4
branch  6 taken 4 (fallthrough)
branch  7 taken 0 (throw)
        4:  127-block  2
call    8 returned 4
branch  9 taken 3 (fallthrough)
branch 10 taken 1
        3:  127-block  3
call   11 returned 3
call   12 returned 3
branch 13 taken 3 (fallthrough)
branch 14 taken 0 (throw)
        3:  127-block  4
call   15 returned 3
call   16 returned 3
branch 17 taken 3 (fallthrough)
branch 18 taken 0 (throw)
        3:  127-block  5
call   19 returned 3
branch 20 taken 2 (fallthrough)
branch 21 taken 1
branch 22 taken 1 (fallthrough)
branch 23 taken 1
        2:  127-block  6
        2:  127-block  7
        3:  127-block  8
call   24 returned 3
        4:  127-block  9
branch 25 taken 3 (fallthrough)
branch 26 taken 1
        3:  127-block 10
call   27 returned 3
        4:  127-block 11
branch 28 taken 4 (fallthrough)
branch 29 taken 0
        4:  127-block 12
call   30 returned 4
        4:  127-block 13
branch 31 taken 4 (fallthrough)
branch 32 taken 0
        4:  127-block 14
call   33 returned 4
        4:  127-block 15
branch 34 taken 2 (fallthrough)
branch 35 taken 2
    $$$$$:  127-block 16
branch 36 never executed (fallthrough)
branch 37 never executed
    $$$$$:  127-block 17
call   38 never executed
    $$$$$:  127-block 18
    $$$$$:  127-block 19
branch 39 never executed (fallthrough)
branch 40 never executed
    $$$$$:  127-block 20
call   41 never executed
    $$$$$:  127-block 21
    $$$$$:  127-block 22
branch 42 never executed (fallthrough)
branch 43 never executed
    $$$$$:  127-block 23
call   44 never executed
    $$$$$:  127-block 24
    $$$$$:  127-block 25
branch 45 never executed (fallthrough)
branch 46 never executed
    $$$$$:  127-block 26
call   47 never executed
    $$$$$:  127-block 27
call   48 never executed
        6:  128:                                                                                                         produseSortate.produse[i].getTip() < produseSortate.produse[i+1].getTip())) {
        2:  128-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  128-block  1
call    4 returned 2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
        2:  128-block  2
call    8 returned 2
        4:  128-block  3
branch  9 taken 2 (fallthrough)
branch 10 taken 2
        2:  128-block  4
call   11 returned 2
        4:  128-block  5
branch 12 taken 2 (fallthrough)
branch 13 taken 2
        2:  128-block  6
call   14 returned 2
        4:  128-block  7
branch 15 taken 3 (fallthrough)
branch 16 taken 1
    $$$$$:  128-block  8
branch 17 never executed (fallthrough)
branch 18 never executed
    $$$$$:  128-block  9
call   19 never executed
    $$$$$:  128-block 10
    $$$$$:  128-block 11
branch 20 never executed (fallthrough)
branch 21 never executed
    $$$$$:  128-block 12
call   22 never executed
    $$$$$:  128-block 13
        2:  129:                        Produs aux = produseSortate.produse[i];
        2:  129-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  130:                        produseSortate.produse[i] = produseSortate.produse[i+1];
        2:  130-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:  131:                        produseSortate.produse[i+1] = aux;
        2:  131-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  132:                        ok = 0;
        2:  133:                    }
        2:  133-block  0
call    0 returned 2
    $$$$$:  133-block  1
call    1 never executed
        -:  134:                }
        -:  135:            }
        -:  136:        }
        -:  137:    }
        7:  138:}
        7:  138-block  0
        -:  139:
function _ZN10RepoProdus12filtrareNumeERS_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 100%
        2:  140:void RepoProdus::filtrareNume(RepoProdus &produseFiltrate, const string& nume) {
        8:  141:    for(int i=0;i<produse.size();i++) {
        2:  141-block  0
        6:  141-block  1
        8:  141-block  2
call    0 returned 8
branch  1 taken 6
branch  2 taken 2 (fallthrough)
        6:  142:        if(produse[i].getNume() == nume) {
        6:  142-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  142-block  1
call    4 returned 6
call    5 returned 6
branch  6 taken 6 (fallthrough)
branch  7 taken 0
        6:  143:            produseFiltrate.store(produse[i]);
        6:  143-block  0
call    0 returned 6
call    1 returned 6
        -:  144:        }
        -:  145:    }
        2:  146:}
        2:  146-block  0
        -:  147:
function _ZN10RepoProdus11filtrareTipERS_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 100%
        2:  148:void RepoProdus::filtrareTip(RepoProdus &produseFiltrate, const string& tip) {
        8:  149:    for(int i=0;i<produse.size();i++) {
        2:  149-block  0
        6:  149-block  1
        8:  149-block  2
call    0 returned 8
branch  1 taken 6
branch  2 taken 2 (fallthrough)
        6:  150:        if(produse[i].getTip() == tip) {
        6:  150-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  150-block  1
call    4 returned 6
call    5 returned 6
branch  6 taken 4 (fallthrough)
branch  7 taken 2
        4:  151:            produseFiltrate.store(produse[i]);
        4:  151-block  0
call    0 returned 4
call    1 returned 4
        -:  152:        }
        -:  153:    }
        2:  154:}
        2:  154-block  0
        -:  155:
function _ZN10RepoProdus12filtrarePretERS_RKd called 2 returned 100% blocks executed 100%
        2:  156:void RepoProdus::filtrarePret(RepoProdus &produseFiltrate, const double& pret) {
        8:  157:    for(int i=0;i<produse.size();i++) {
        2:  157-block  0
        6:  157-block  1
        8:  157-block  2
call    0 returned 8
branch  1 taken 6
branch  2 taken 2 (fallthrough)
        6:  158:        if(produse[i].getPret() == pret) {
        6:  158-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 2 (fallthrough)
branch  3 taken 4
        2:  159:            produseFiltrate.store(produse[i]);
        2:  159-block  0
call    0 returned 2
call    1 returned 2
        -:  160:        }
        -:  161:    }
        2:  162:}
        -:  163:
function _ZN10RepoProdus18filtrareProducatorERS_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 100%
        2:  164:void RepoProdus::filtrareProducator(RepoProdus &produseFiltrate, const string& producator) {
        8:  165:    for(int i=0;i<produse.size();i++) {
        2:  165-block  0
        6:  165-block  1
        8:  165-block  2
call    0 returned 8
branch  1 taken 6
branch  2 taken 2 (fallthrough)
        6:  166:        if(produse[i].getProducator() == producator) {
        6:  166-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  166-block  1
call    4 returned 6
call    5 returned 6
branch  6 taken 4 (fallthrough)
branch  7 taken 2
        4:  167:            produseFiltrate.store(produse[i]);
        4:  167-block  0
call    0 returned 4
call    1 returned 4
        -:  168:        }
        -:  169:    }
        2:  170:}
        2:  170-block  0
        -:  171:
        -:  172:
function _Z16testRepoAdaugarev called 1 returned 100% blocks executed 55%
        1:  173:void testRepoAdaugare() {
        1:  174:    RepoProdus repo;
        1:  174-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  175:    Produs p{"Apa", "Minerala", 2.99, "Bucovina"};
        1:  175-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  175-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  175-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  175-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  175-block  4
    $$$$$:  175-block  5
    $$$$$:  175-block  6
call   13 never executed
    $$$$$:  175-block  7
    $$$$$:  175-block  8
    $$$$$:  175-block  9
call   14 never executed
    $$$$$:  175-block 10
    $$$$$:  175-block 11
        1:  176:    repo.store(p);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  177:    assert(repo.getAll().size() == 1);
        1:  177-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  177-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  177-block  2
call    6 never executed
        1:  177-block  3
        1:  177-block  4
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  177-block  5
call    9 returned 1
    $$$$$:  177-block  6
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:  177-block  7
call   12 never executed
    $$$$$:  177-block  8
        -:  178:    try {
        1:  179:        repo.store(p);
        1:  179-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1 (throw)
        -:  180:    }
        1:  181:    catch (RepoException&) {
        1:  181-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  181-block  1
call    2 returned 1
        -:  182:        assert(true);
        1:  183:    }
call    0 returned 1
        1:  184:}
        1:  184-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:  184-block  1
call    2 never executed
    $$$$$:  184-block  2
call    3 never executed
        -:  185:
function _Z16testRepoStergerev called 1 returned 100% blocks executed 59%
        1:  186:void testRepoStergere() {
        1:  187:    RepoProdus repo;
        1:  187-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  188:    Produs p{"Apa", "Minerala", 2.99, "Bucovina"};
        1:  188-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  188-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  188-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  188-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  188-block  4
    $$$$$:  188-block  5
    $$$$$:  188-block  6
call   13 never executed
    $$$$$:  188-block  7
    $$$$$:  188-block  8
    $$$$$:  188-block  9
call   14 never executed
    $$$$$:  188-block 10
    $$$$$:  188-block 11
        1:  189:    repo.store(p);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  190:    assert(repo.getAll().size() == 1);
        1:  190-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  190-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  190-block  2
call    6 never executed
        1:  190-block  3
        1:  190-block  4
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  190-block  5
call    9 returned 1
        1:  190-block  6
    $$$$$:  190-block  7
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:  190-block  8
call   12 never executed
    $$$$$:  190-block  9
        5:  191:    repo.del("Apa", "Minerala", "Bucovina");
        1:  191-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  191-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  191-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  191-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  191-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
    $$$$$:  191-block  5
call   15 never executed
    $$$$$:  191-block  6
    $$$$$:  191-block  7
    $$$$$:  191-block  8
call   16 never executed
    $$$$$:  191-block  9
    $$$$$:  191-block 10
    $$$$$:  191-block 11
call   17 never executed
    $$$$$:  191-block 12
    $$$$$:  191-block 13
       1*:  192:    assert(repo.getAll().size() == 0);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  192-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  192-block  1
call    6 never executed
        1:  192-block  2
        1:  192-block  3
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  192-block  4
call    9 returned 1
        1:  192-block  5
    $$$$$:  192-block  6
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:  192-block  7
call   12 never executed
    $$$$$:  192-block  8
        -:  193:    try {
       6*:  194:        repo.del("Apa", "Minerala", "Bucovina");
        1:  194-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  194-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  194-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  194-block  3
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1 (throw)
    %%%%%:  194-block  4
call   12 never executed
call   13 never executed
call   14 never executed
        1:  194-block  5
call   15 returned 1
        1:  194-block  6
        1:  194-block  7
        1:  194-block  8
call   16 returned 1
        1:  194-block  9
        1:  194-block 10
        1:  194-block 11
call   17 returned 1
        1:  194-block 12
        1:  194-block 13
        -:  195:    }
        1:  196:    catch (RepoException&) {
        1:  196-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  196-block  1
call    2 returned 1
        -:  197:        assert(true);
        1:  198:    }
call    0 returned 1
        1:  199:}
        1:  199-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:  199-block  1
call    2 never executed
    $$$$$:  199-block  2
call    3 never executed
        -:  200:
function _Z18testRepoModificarev called 1 returned 100% blocks executed 55%
        1:  201:void testRepoModificare() {
        1:  202:    RepoProdus repo;
        1:  202-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  203:    Produs p{"Apa", "Minerala", 2.99, "Bucovina"};
        1:  203-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  203-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  203-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  203-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  203-block  4
    $$$$$:  203-block  5
    $$$$$:  203-block  6
call   13 never executed
    $$$$$:  203-block  7
    $$$$$:  203-block  8
    $$$$$:  203-block  9
call   14 never executed
    $$$$$:  203-block 10
    $$$$$:  203-block 11
        1:  204:    repo.store(p);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  205:    Produs p2{"Apa", "Plata", 3.99, "Bucovina"};
        1:  205-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  205-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  205-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  205-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  205-block  4
    $$$$$:  205-block  5
    $$$$$:  205-block  6
call   13 never executed
    $$$$$:  205-block  7
    $$$$$:  205-block  8
    $$$$$:  205-block  9
call   14 never executed
    $$$$$:  205-block 10
    $$$$$:  205-block 11
       1*:  206:    assert(repo.getAll().size() == 1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  206-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  206-block  1
call    6 never executed
        1:  206-block  2
        1:  206-block  3
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  206-block  4
call    9 returned 1
    $$$$$:  206-block  5
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:  206-block  6
call   12 never executed
    $$$$$:  206-block  7
        1:  207:    repo.modify(p, p2);
        1:  207-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  208:    Vector<Produs> produse = repo.getAll();
        1:  208-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  209:    assert(repo.getAll().size() == 1);
        1:  209-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  209-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  209-block  2
call    6 never executed
        1:  209-block  3
        1:  209-block  4
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  209-block  5
call    9 returned 1
    $$$$$:  209-block  6
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:  209-block  7
call   12 never executed
    $$$$$:  209-block  8
       1*:  210:    assert(produse[0].getNume() == "Apa");
        1:  210-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  210-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  210-block  2
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  210-block  3
call    9 never executed
        1:  210-block  4
        1:  210-block  5
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        1:  210-block  6
call   12 returned 1
    $$$$$:  210-block  7
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$:  210-block  8
call   15 never executed
    $$$$$:  210-block  9
       1*:  211:    assert(produse[0].getTip() == "Plata");
        1:  211-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  211-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  211-block  2
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  211-block  3
call    9 never executed
        1:  211-block  4
        1:  211-block  5
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        1:  211-block  6
call   12 returned 1
    $$$$$:  211-block  7
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$:  211-block  8
call   15 never executed
    $$$$$:  211-block  9
       1*:  212:    assert(produse[0].getPret() == 3.99);
        1:  212-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  212-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  212-block  2
call    6 never executed
        1:  212-block  3
       1*:  213:    assert(produse[0].getProducator() == "Bucovina");
        1:  213-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  213-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  213-block  2
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    %%%%%:  213-block  3
call    9 never executed
        1:  213-block  4
        1:  213-block  5
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        1:  213-block  6
call   12 returned 1
    $$$$$:  213-block  7
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$:  213-block  8
call   15 never executed
    $$$$$:  213-block  9
        -:  214:    try {
        1:  215:        repo.modify(p, p2);
        1:  215-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1 (throw)
        -:  216:    }
        1:  217:    catch (RepoException&) {
        1:  217-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  217-block  1
call    2 returned 1
        -:  218:        assert(true);
        1:  219:    }
call    0 returned 1
        1:  220:}
        1:  220-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
    $$$$$:  220-block  1
call    4 never executed
    $$$$$:  220-block  2
call    5 never executed
    $$$$$:  220-block  3
call    6 never executed
    $$$$$:  220-block  4
call    7 never executed
        -:  221:
function _Z7testMSGv called 1 returned 100% blocks executed 55%
        1:  222:void testMSG() {
        1:  222-block  0
        1:  223:    std::string Mesaj = "Exemplu";
        1:  223-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  223-block  1
        1:  224:    RepoException repoException(Mesaj);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  224-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  224-block  1
call    6 returned 1
    $$$$$:  224-block  2
call    7 never executed
    $$$$$:  224-block  3
        1:  225:    std::string MesajAfisat = repoException.getMsg();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  226:    assert(Mesaj == MesajAfisat);
        1:  226-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  226-block  1
call    3 never executed
        1:  226-block  2
        1:  227:}
        1:  227-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:  227-block  1
call    3 never executed
    $$$$$:  227-block  2
call    4 never executed
    $$$$$:  227-block  3
call    5 never executed
        -:  228:
function _Z12testFiltrarev called 1 returned 100% blocks executed 53%
        1:  229:void testFiltrare() {
        1:  230:    RepoProdus repo;
        1:  230-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  231:    RepoProdus listaFiltrata;
        1:  231-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        6:  232:    Produs p1{"Apa", "Minerala", 2.99, "Bucovina"};
        1:  232-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  232-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  232-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  232-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  232-block  4
    $$$$$:  232-block  5
    $$$$$:  232-block  6
call   13 never executed
    $$$$$:  232-block  7
    $$$$$:  232-block  8
    $$$$$:  232-block  9
call   14 never executed
    $$$$$:  232-block 10
    $$$$$:  232-block 11
        6:  233:    Produs p2{"Apa", "Plata", 3.99, "Bucovina"};
        1:  233-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  233-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  233-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  233-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  233-block  4
    $$$$$:  233-block  5
    $$$$$:  233-block  6
call   13 never executed
    $$$$$:  233-block  7
    $$$$$:  233-block  8
    $$$$$:  233-block  9
call   14 never executed
    $$$$$:  233-block 10
    $$$$$:  233-block 11
        5:  234:    Produs p3{"Apa", "Plata", 3.29, "Aqua Carpatica"};
        1:  234-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  234-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  234-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  234-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  234-block  4
    $$$$$:  234-block  5
    $$$$$:  234-block  6
call   13 never executed
    $$$$$:  234-block  7
    $$$$$:  234-block  8
    $$$$$:  234-block  9
call   14 never executed
    $$$$$:  234-block 10
    $$$$$:  234-block 11
        1:  235:    repo.store(p1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  236:    repo.store(p2);
        1:  236-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  237:    repo.store(p3);
        1:  237-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  238:    assert(repo.getAll().size() == 3);
        1:  238-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  238-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  238-block  2
call    6 never executed
        1:  238-block  3
        1:  238-block  4
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  238-block  5
call    9 returned 1
        1:  238-block  6
    $$$$$:  238-block  7
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:  238-block  8
call   12 never executed
    $$$$$:  238-block  9
        1:  239:    repo.filtrareNume(listaFiltrata, "Apa");
        1:  239-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  239-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  239-block  2
call    6 returned 1
    $$$$$:  239-block  3
call    7 never executed
    $$$$$:  239-block  4
    $$$$$:  239-block  5
       1*:  240:    assert(listaFiltrata.getAll().size() == 3);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  240-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  240-block  1
call    6 never executed
        1:  240-block  2
        1:  240-block  3
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  240-block  4
call    9 returned 1
    $$$$$:  240-block  5
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:  240-block  6
call   12 never executed
    $$$$$:  240-block  7
        -:  241:
        1:  242:    listaFiltrata = {};
        1:  242-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  242-block  1
call    3 returned 1
call    4 returned 1
    $$$$$:  242-block  2
        1:  243:    repo.filtrareTip(listaFiltrata, "Plata");
        1:  243-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  243-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  243-block  2
call    6 returned 1
    $$$$$:  243-block  3
call    7 never executed
    $$$$$:  243-block  4
    $$$$$:  243-block  5
       1*:  244:    assert(listaFiltrata.getAll().size() == 2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  244-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  244-block  1
call    6 never executed
        1:  244-block  2
        1:  244-block  3
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  244-block  4
call    9 returned 1
    $$$$$:  244-block  5
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:  244-block  6
call   12 never executed
    $$$$$:  244-block  7
        -:  245:
        1:  246:    listaFiltrata = {};
        1:  246-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  246-block  1
call    3 returned 1
call    4 returned 1
    $$$$$:  246-block  2
        1:  247:    repo.filtrarePret(listaFiltrata, 3.99);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  247-block  0
       1*:  248:    assert(listaFiltrata.getAll().size() == 1);
        1:  248-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  248-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  248-block  2
call    6 never executed
        1:  248-block  3
        1:  248-block  4
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  248-block  5
call    9 returned 1
    $$$$$:  248-block  6
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:  248-block  7
call   12 never executed
    $$$$$:  248-block  8
        -:  249:
        1:  250:    listaFiltrata = {};
        1:  250-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  250-block  1
call    3 returned 1
call    4 returned 1
    $$$$$:  250-block  2
        1:  251:    repo.filtrareProducator(listaFiltrata, "Bucovina");;
        1:  251-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  251-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  251-block  2
call    6 returned 1
    $$$$$:  251-block  3
call    7 never executed
    $$$$$:  251-block  4
    $$$$$:  251-block  5
       1*:  252:    assert(listaFiltrata.getAll().size() == 2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  252-block  0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  252-block  1
call    6 never executed
        1:  252-block  2
        1:  252-block  3
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  252-block  4
call    9 returned 1
    $$$$$:  252-block  5
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:  252-block  6
call   12 never executed
    $$$$$:  252-block  7
        1:  253:}
        1:  253-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
    $$$$$:  253-block  1
call    5 never executed
    $$$$$:  253-block  2
call    6 never executed
    $$$$$:  253-block  3
call    7 never executed
    $$$$$:  253-block  4
call    8 never executed
    $$$$$:  253-block  5
call    9 never executed
        -:  254:
function _Z10test_cautav called 1 returned 100% blocks executed 58%
        1:  255:void test_cauta() {
        1:  256:    RepoProdus repo;
        1:  256-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:  257:    Produs p{"Apa", "Minerala", 2.99, "Bucovina"};
        1:  257-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  257-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  257-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  257-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  257-block  4
    $$$$$:  257-block  5
    $$$$$:  257-block  6
call   13 never executed
    $$$$$:  257-block  7
    $$$$$:  257-block  8
    $$$$$:  257-block  9
call   14 never executed
    $$$$$:  257-block 10
    $$$$$:  257-block 11
        1:  258:    repo.store(p);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  259:    assert(repo.getAll().size() == 1);
        1:  259-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  259-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  259-block  2
call    6 never executed
        1:  259-block  3
        1:  259-block  4
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  259-block  5
call    9 returned 1
        1:  259-block  6
    $$$$$:  259-block  7
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:  259-block  8
call   12 never executed
    $$$$$:  259-block  9
        5:  260:    auto prod = repo.cauta("Apa", "Minerala", "Bucovina");
        1:  260-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  260-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  260-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  260-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  260-block  4
call   12 returned 1
call   13 returned 1
call   14 returned 1
    $$$$$:  260-block  5
call   15 never executed
    $$$$$:  260-block  6
    $$$$$:  260-block  7
    $$$$$:  260-block  8
call   16 never executed
    $$$$$:  260-block  9
    $$$$$:  260-block 10
    $$$$$:  260-block 11
call   17 never executed
    $$$$$:  260-block 12
    $$$$$:  260-block 13
       1*:  261:    assert(prod.getNume() == "Apa");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  261-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  261-block  1
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:  261-block  2
call    8 never executed
        1:  261-block  3
        1:  261-block  4
branch  9 taken 1 (fallthrough)
branch 10 taken 0
        1:  261-block  5
call   11 returned 1
    $$$$$:  261-block  6
branch 12 never executed (fallthrough)
branch 13 never executed
    $$$$$:  261-block  7
call   14 never executed
    $$$$$:  261-block  8
       1*:  262:    assert(prod.getTip() == "Minerala");
        1:  262-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  262-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  262-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:  262-block  3
call    8 never executed
        1:  262-block  4
        1:  262-block  5
branch  9 taken 1 (fallthrough)
branch 10 taken 0
        1:  262-block  6
call   11 returned 1
    $$$$$:  262-block  7
branch 12 never executed (fallthrough)
branch 13 never executed
    $$$$$:  262-block  8
call   14 never executed
    $$$$$:  262-block  9
       1*:  263:    assert(prod.getProducator() == "Bucovina");
        1:  263-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  263-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  263-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 1
    %%%%%:  263-block  3
call    8 never executed
        1:  263-block  4
        1:  263-block  5
branch  9 taken 1 (fallthrough)
branch 10 taken 0
        1:  263-block  6
call   11 returned 1
        1:  263-block  7
    $$$$$:  263-block  8
branch 12 never executed (fallthrough)
branch 13 never executed
    $$$$$:  263-block  9
call   14 never executed
    $$$$$:  263-block 10
        -:  264:    try {
       6*:  265:        auto prod2 = repo.cauta("Apa", "Minerala", "Bucovin");}
        1:  265-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  265-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  265-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  265-block  3
call    9 returned 1
branch 10 taken 0 (fallthrough)
branch 11 taken 1 (throw)
    %%%%%:  265-block  4
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
        1:  265-block  5
call   16 returned 1
        1:  265-block  6
        1:  265-block  7
        1:  265-block  8
call   17 returned 1
        1:  265-block  9
        1:  265-block 10
        1:  265-block 11
call   18 returned 1
        1:  265-block 12
        1:  265-block 13
        1:  266:    catch (RepoException&) {
        1:  266-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  266-block  1
call    2 returned 1
        -:  267:        assert(true);
        1:  268:    }
call    0 returned 1
        1:  269:}
        1:  269-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:  269-block  1
call    3 never executed
    $$$$$:  269-block  2
call    4 never executed
    $$$$$:  269-block  3
call    5 never executed
        -:  270:
function _Z9test_sortv called 1 returned 100% blocks executed 57%
        1:  271:void test_sort() {
        1:  272:    RepoProdus repoSortat;
        1:  272-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        6:  273:    Produs p1{"Apa", "Minerala", 4.99, "Bucovina"};
        1:  273-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  273-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  273-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  273-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  273-block  4
    $$$$$:  273-block  5
    $$$$$:  273-block  6
call   13 never executed
    $$$$$:  273-block  7
    $$$$$:  273-block  8
    $$$$$:  273-block  9
call   14 never executed
    $$$$$:  273-block 10
    $$$$$:  273-block 11
        6:  274:    Produs p2{"Paine", "Plata", 3.99, "Bucovina"};
        1:  274-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  274-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  274-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  274-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  274-block  4
    $$$$$:  274-block  5
    $$$$$:  274-block  6
call   13 never executed
    $$$$$:  274-block  7
    $$$$$:  274-block  8
    $$$$$:  274-block  9
call   14 never executed
    $$$$$:  274-block 10
    $$$$$:  274-block 11
        5:  275:    Produs p3{"Apa", "Semi", 3.29, "Aqua Carpatica"};
        1:  275-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  275-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  275-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  275-block  3
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
    $$$$$:  275-block  4
    $$$$$:  275-block  5
    $$$$$:  275-block  6
call   13 never executed
    $$$$$:  275-block  7
    $$$$$:  275-block  8
    $$$$$:  275-block  9
call   14 never executed
    $$$$$:  275-block 10
    $$$$$:  275-block 11
        1:  276:    repoSortat.store(p1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  277:    repoSortat.store(p2);
        1:  277-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  278:    repoSortat.store(p3);
        1:  278-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  279:    assert(repoSortat.getAll().size() == 3);
        1:  279-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  279-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  279-block  2
call    6 never executed
        1:  279-block  3
        1:  279-block  4
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        1:  279-block  5
call    9 returned 1
    $$$$$:  279-block  6
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$:  279-block  7
call   12 never executed
    $$$$$:  279-block  8
        1:  280:    repoSortat.sortare(repoSortat, 1, 1);
        1:  280-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  281:    auto sortate = repoSortat.getAll();
        1:  281-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  282:    assert(sortate[0].getPret() == 4.99);
        1:  282-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  282-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  282-block  2
call    6 never executed
        1:  282-block  3
        -:  283:
        1:  284:    repoSortat.sortare(repoSortat, 2, 1);
        1:  284-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  285:    auto sortate2 = repoSortat.getAll();
        1:  285-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  286:    assert(sortate2[0].getPret() == 3.29);
        1:  286-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  286-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  286-block  2
call    6 never executed
        1:  286-block  3
        -:  287:
        1:  288:    repoSortat.sortare(repoSortat, 3, 1);
        1:  288-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  289:    auto sortate3 = repoSortat.getAll();
        1:  289-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  290:    assert(sortate3[0].getPret() == 4.99);
        1:  290-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  290-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  290-block  2
call    6 never executed
        1:  290-block  3
        -:  291:
        1:  292:    repoSortat.sortare(repoSortat, 1, 2);
        1:  292-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  293:    auto sortate4 = repoSortat.getAll();
        1:  293-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  294:    assert(sortate4[0].getPret() == 3.99);
        1:  294-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  294-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  294-block  2
call    6 never executed
        1:  294-block  3
        -:  295:
        1:  296:    repoSortat.sortare(repoSortat, 2, 2);
        1:  296-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  297:    auto sortate5 = repoSortat.getAll();
        1:  297-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  298:    assert(sortate5[0].getPret() == 4.99);
        1:  298-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  298-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  298-block  2
call    6 never executed
        1:  298-block  3
        -:  299:
        1:  300:    repoSortat.sortare(repoSortat, 3, 2);
        1:  300-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  301:    auto sortate6 = repoSortat.getAll();
        1:  301-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  302:    assert(sortate6[0].getPret() == 3.99);
        1:  302-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  302-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
    %%%%%:  302-block  2
call    6 never executed
        1:  302-block  3
        1:  303:}
        1:  303-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
    $$$$$:  303-block  1
call   10 never executed
    $$$$$:  303-block  2
call   11 never executed
    $$$$$:  303-block  3
call   12 never executed
    $$$$$:  303-block  4
call   13 never executed
    $$$$$:  303-block  5
call   14 never executed
    $$$$$:  303-block  6
call   15 never executed
    $$$$$:  303-block  7
call   16 never executed
    $$$$$:  303-block  8
call   17 never executed
    $$$$$:  303-block  9
call   18 never executed
    $$$$$:  303-block 10
call   19 never executed
        -:  304:
function _Z9testeREPOv called 1 returned 100% blocks executed 100%
        1:  305:void testeREPO() {
        1:  306:    testRepoAdaugare();
        1:  306-block  0
call    0 returned 1
        1:  307:    testRepoStergere();
call    0 returned 1
        1:  308:    testRepoModificare();
call    0 returned 1
        1:  309:    testMSG();
call    0 returned 1
        1:  310:    testFiltrare();
call    0 returned 1
        1:  311:    test_cauta();
call    0 returned 1
        1:  312:    test_sort();
call    0 returned 1
        1:  313:}
