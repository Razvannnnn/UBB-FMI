1. Displays lines in a txt that contain at least 1 time stamp
dd-mm-aaaa

cat dates.txt 
12-12-1111
123-12-1111
0-0-1234

grep -Eo '^[0-9]{,2}\-[0-9]{,2}\-[0-9]{,4}' dates.txt 

2. Display lines of a file s.txt swapping any pair of
vower + odd digit

echo 'a23b7a98e3' | sed -E 's/([aeiouAEIOU])([13569])/\2\1/g'

3. Display list of all unique apaearances of number pi with 2 or more decimals

cat nPI  

3.14152
3.14
3.12
2.1415

cat nPI | grep -Eo '^[3]\.[1][4][0-9]{0,}'
grep -Eo '^[3]\.[1][4][0-9]{0,}' nPI

4. Given a directory and its hierarch , write a unix shell script
that displays the directory with a file with the extension .mp3

#/bin/bash

handle_directory() {
	DIR_NAME=$1
	cd $DIR_NAME
  
	local ok=0
	pwd
	for FILE in *; do
		# Daca are extensia .mp3
		if [[ $FILE =~ \.mp3$ && -f $FILE ]]; then
			((++ok))
		fi
		echo "$FILE"
		# Daca este director mergem mai departe
		if [[ -d $FILE ]]; then
			handle_directory "${FILE}"
		fi
	done
	cd ..
	if [[ $ok -gt 0 ]]; then
		echo "1"
	else
		echo "0"
	fi
  cd ..
}

main() {
	# Parcurgem toate fisierele , daca este director mergem mai departe
	for FILE in *; do
		if [[ -d ${FILE} ]]; then
			ans=$(handle_directory "$FILE")
			if [[ $ans == "1" ]]; then
				echo "$FILE has .mp3 in it"
			fi
			echo "$FILE"
		fi
	done
}

main ""

5. Write a unix shell script that calculates the average of lines of a file
with the extension .sh

#!/bin/bash

# Vector pentru a adauga liniile pentru fisiere cu extensia .sh
declare -a ans

handle_directory() {
	local DIR_NAME=$1

	cd "$DIR_NAME" || return 1

	for FILE in *; do
		if [[ -f $FILE && $FILE =~ \.sh$ ]]; then
			nr_lines=$(wc -l <"$FILE")
			ans+=("$nr_lines")
		elif [[ -d $FILE ]]; then
			handle_directory "$FILE"
		fi
	done

	cd ..
}

main() {
	for FILE in *; do
		if [[ -d $FILE ]]; then
			handle_directory "$FILE"
		fi

		if [[ -f $FILE && $FILE =~ \.sh$ ]]; then
			nr_lines=$(wc -l <"$FILE")
			ans+=("$nr_lines")
		fi
	done

	for a in "${ans[@]}"; do
		echo "$a"
	done
  local sum=0
  local count=0
  for a in "${ans[@]}"; do
      sum=$((sum + a))
      count=$((count + 1))
  done
  
  average=$(echo "scale=2; $sum / $count" | bc)
  echo $average
}

main


6. How many procceses? 
if(fork() || fork())
{
    fork();
}


aici conditia din if se refera daca cel putin in unul suntem in parinte

                                P
                            |      |
                          c1       P
                        |    |    |  |
                        c3   c1   c2 P
                            | |
                           c4 c1

codul :
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <wait.h>

int main(int argc, char *argv[]) {
  pid_t pid1 = fork();
  printf("%d\n", getpid());
  pid_t pid2 = fork();
  printf("%d\n", getpid());
  if (pid1 || pid2) {
    pid_t pid3 = fork();
    printf("%d\n", getpid());
  }
  return EXIT_SUCCESS;
}

7. how many procceses when parrent procces call f(3)

void f(int n)
{
    if(n > 0 || fork() == 0){
        f(n - 1);
        exit(0);
      }
    wait(0);
  }
initial call + 1
f(3) - initial call - +1
f(2) - first fork : +2 
f(1) - second fork : +4
f(0) - fourth fork : +8

in total : 16
dar nus sigur


8. What will the code below print?
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <wait.h>

int main(int argc, char *argv[]) {
  char *s[3] = {"A", "B", "C"};
  for (int i = 0; i < 3; ++i) {
    pid_t pid = fork();
    if (pid == 0) {
      execl("/bin/echo", "/bin/echo", s[i], NULL);
    }
  }
  return EXIT_SUCCESS;
}

A B C 

9. What does the system call 'read' do when the pipe contains less data then it is required
to read but it is not empty?

file_descriptor - fd

read(fd , &buf , sizeof(buf));

blocking mode (default) : partial read and then it will block/wait until the required amount of data is available
non-blocking mode : partial read and then return

10. What the code will print?

#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <wait.h>

int main(int argc, char *argv[]) {
  int p[2];
  char buf[10] = "abcdefghij";
  int n;
  pipe(p);

  n = read(p[0], buf, 10);
  printf("%d\n", n);
  return EXIT_SUCCESS;
}
Codul nu va afisa nimic pentru ca nu s-a pus nimic p[1]
Se blocheaza pentru ca este comportamentul la open pentru pipe-uri sa astepte pana cand sa scrie

11. Zombie procces : 
Este un proces a carui executie a fost terminata dar nu a fost stearsa din tabelul de executie
se poate vedea cu ps aux -e | grep 'Z'

12. F is executed by 10 thread ,
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <wait.h>
#define N 10
int n = 0;
pthread_mutex_t mutex;
void *f(void *p) {
  pthread_mutex_lock(&mutex);
  n++;
  pthread_mutex_unlock(&mutex);
  return NULL;
}

int main(int argc, char *argv[]) {
  pthread_mutex_init(&mutex, NULL);
  pthread_t *th;
  th = (pthread_t *)malloc(sizeof(pthread_t) * N);

  for (int i = 0; i < N; ++i) {
    if (pthread_create(&th[i], NULL, f, NULL) != 0) {
      return EXIT_FAILURE;
    }
  }

  for (int i = 0; i < N; ++i) {
    if (pthread_join(th[i], NULL) != 0) {
      return EXIT_FAILURE;
    }
  }
  printf("%d\n", n);
  free(th);
  return EXIT_SUCCESS;
}


13. Schdeul so that the sum of delays is minim:
A(7 , 13) , B(5 , 9) , C(2 , 4)

C , B , A
2   7   14 -> 0 + 0 + 1 = 1


14. Disavantage and advantage of set - associative cache versus direct cache

directed-map-cache - map each block of main memory to only one 
                      cache location , se foloseste un algoritm de indexing sau hashing
                      cand se acceseaza se foloseste tag , index, offset
pro : 
      simplitate si vitez
      cost redus
cons:
      frecventa la coliziuni, se va intra in conflict si se vor pierde date din cache
      flexibilitate redusa , un block per locatie

 Set-Associative Cache - un bloc de memorie la mai multe locatii din cache
            un exemplu - 2-way Set-Associative , fiecare block de memorie
            poate fi mapat la una din 2 locatii posibile in cache

pro : 
      reducerea coliziunilor
      flexibilitate mai mare
cons:
      complexitate si cost, mai multa logica necesare , cai
      consum de energie , deoarece se fac mai multe verificiari

15. What page has the highest priority in the LRU repl policy , when choosing a victim page.
LRU - least recently used
MRU - most recently used


16 . Given 2 Set-Associative caches , one with 2 sets of 4 pages
and one set with 4 sets of 2 pages, which would perform for the following
sequence of page requests

20, 9 , 18 , 27 , 20 , 9 , 18 , 27

cache 1:
2 sets 4 pages , adica are 4 sloturi pe fiecare nivel
set 0 : [20 , 18 , 20 , 18]
set 1 : [9 , 27 , 9 , 27]

cache 2:
4 sets , 2 pages - 4 indexuri libere cu cate 2 sloturi fiecare
set 0 : [20 , 20]
set 1 : [9 , 9]
set 2 : [18 , 18]
set 3 : [27 , 27]


17 . How many data blocks can be appended to by the triple indirection
of an i-node , if a block contains N addresate other blocks?
D + n + n^2 + n^3

18. semaphores - iti blocheaza un numar de thread-uri pana cand se executa acel numar
set_init(&semaphore , 0 , 4); lasa cate 4 odata

PRODUCER CONSUMER : 
avem P(producer) si c(consumer ) ambii au acces la un buffer , shared memory
P adauga si C scoate din el
3 PROBLEME:
  1) manage shared memory , we can have race conditions , maybe use a mutex
  2) checking if the buffer is full
  3) checking if buffer is empty

we solve the problem by having 2 semaphores
one with empty slots , one with full slots



19. method for preventing deadlock when you cannot avoid modifying resources concurently
a) resource ordering
b) banker algorithm
c) hold and wait

20. binary semaphore and its P method
doar un singur thread are acces la o parte critica

methods: wait(P) , signal(V)
wait decrement the value of the semaphore
signal - increments the value of the semaphore

diferenta intre mutex si binary semaphore este ca 
poti da "unlock" la binary semaphore in alt thread
in mutex poti da unlock doar in thread-ul curent

