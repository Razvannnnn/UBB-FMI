1. RO: Daţi o expresie regulară care acceptă orice număr impar de cuvinte separate prin spaţii, fiecare cuvânt având
număr impar de litere.
EN: Give a regular expression that matches any odd number of words, each word having an odd number of letters.

R:



2. RO: Daţi patru comenzi care afişează numărul de linii goale dintr-un fişier.
EN: Give four commands that display the number of empty lines in a file.

R: grep -E '^$' file | wc -l
   grep -E -v '.' file | wc -l
   grep -E -v '.{1,}' file | wc -l
   grep -E -c '^$' file


3. RO: Scrieţi o comandă SED care afişează liniile dintr-un fişier ştergând din ele primul, al treilea, al cincilea,
al şaptelea, etc spaţii.
EN: Write a SED command that displays a file's lines deleting the first, the third, the fifth, the seventh, 
etc space on those lines

!!!!! R:
sed -r 's/([^ ]*) ([^ ]*)/\1\2/; t; :a; s/([])//;ta' file

4. RO: Scrieţi o comandă AWK care afişează produsul ultimului câmp al liniilor de pe poziţii impare care au număr
 impar de câmpuri.
EN: Write an AWK command that displays the product of the last field of lines on odd positions having an odd number
 of fields.

R:
awk 'BEGIN{p=1} {if(NR%2==1 && NF%2==1) p*=$NF} END{print p}' file


5. RO: Daţi patru moduri prin care ieşirea standard a unui proces poate fi redirectată.
EN: Give four ways of redirecting the standard output of a process.

R:
>
>>
|
>&

6. RO: Scrieţi trei condiţii Shell UNIX care verifică existenţa unui fişier.
EN: Write three UNIX Shell conditions that check the existence of a file.

R:
if[ -f 'file' ]
if[ -e 'file' ]
if[ $(ls $file 2>&1 | grep -E -c "No such file") -eq 0 ]

7. RO: Desenati ierarhia proceselor create de coduld e mai jos, incluzand procesul parinte.
EN: Draw the hierarchy of processes created by the code below, including the parent process.

    for(i=0; i<3; i++) {
        if(execlp("ls", "ls", "/", NULL) != -1) {
            fork();
        }
    }

R:
P->C1


8. RO: Adăugaţi codul C necesar pentru ca instrucţiunea de mai jos să nu se blocheze aşteptând la intrarea standard.
EN: Add the necessary code so that the instruction below does not get stuck waiting for standard input.

    execlp("cat", NULL);

R:
int fd = open("file.txt", O_RDRWR);
dup2(fd, 0);


9. RO: Schiţaţi o implementare a funcţiilor popen şi pclose, doar pentru cazul în care outputul comenzii e citit 
în codul C.
EN: Sketch an implementation of the popen and pclose functions, only for the case when the command output should 
be read in the C code.

R:


10. RO: Câte FIFO-uri poate deschide pentru citire un process, dacă FIFO-urile sunt şi vor fi întotdeauna folosite 
de alte procese doar pentru citire?
EN: How many FIFOs can a process open for reading if the FIFOs are and will ever be used by other processes only for 
reading?

R: Numaarul de FIFO depinde de limita sistemului de operare. Aceasta limita poate fi verifica si ajustata 
folosind comanda ulimit. Daca limita este setata la 1024 si nu sunt deschise alte fisiere, procesul poate sa 
deschida pana la 1024 fifo-uri, cu conditia ca fifo-urile sa fie deschise de un alt proces pentru scriere.



11. RO: Când aţi folosi un FIFO în locul unui pipe?
EN: When would you prefer using a FIFO instead of a pipe?

R: FIFO este cel mai bine folosit in situatiile in care este nevoie de comunicare intre procese independente,
cand dorim ca punctul de comunicare sa persiste in sistemul de fisiere si sa fie accesibil intre diferite lansari
ale proceselor sau cand dorim flexibilitate in ordinea lansarii proceselor.



12. RO: Ce este o "secţiune critică"?
EN: What is a "critical section"?

R: O zona critica este un segment din codul unui program in care doar un singur fir de executie sau proces
poate accesa resurse partajate la un moment dat, pentru a preveni eventuale conflicte. Mecanismele de sincro
nizare sunt utilizate pentru a gestiona astfel de zone exclusive.



13. RO: Când aţi folosi un mutex în locul unui rwlock?
EN: When would you prefer using a mutex instead of a rwlock?

R:


14. RO: Care va fi efectul înlocuirii apelurilor la pthread_mutex_lock cu apeluri la sem_wait?
EN: What will be the effect of replacing calls to pthread_mutex_lock with calls to sem_wait?

R: In cazul in care vom folosi un semafor binar si vom inlocui apelurile de lock si unlock al mutex-ului,
programul se va comporta la fel. In cazul in care semaforul va aveam mai multe fire alocate, rezultatul 
programului va putea varia.


15. RO: Ce face pthread_cond_wait cu mutex-ul primit ca argument?
EN: What does pthread_cond_wait do with the mutex it gets as argument?

R: Functia pthread_cond_wait elibereaza mutex-ul primit ca argument si pune firul de executie in asteptare
pe conditia specificata.

16. RO: Schiţaţi o soluţie pentru problema producător-consumator.
EN: Sketch a solution for the producer-consumer problem.

x producatori produc ceva pana se indeplineste o conditie
Cand aceea conditie este indeplinita, 1 consumator primeste din producatori si consuma

R:
void *producer(void* arg) {
	while(1) {
		//produce ceva;
	}
}
void *consumer(void* arg) {
	while(1) {
		//consuma acel ceva;
	}
}
int main() {
	//sunt creati un numar de producator
	//si un consumator
	//Atunci cand producatorii indeplinesc o conditie
	//se trimite semnal la consumator sa consume pana goleste
	//Acesta va semnala cand a consumat tot, iar producatorii vor incepe iar sa produca
	return 0;
}




17. RO: Ce puteţi face ca programator pentru a preveni deadlock-urile?
EN: What can you do as a software developer to prevent deadlocks?

!!!!R:
Pentru a preveni deadlock-urile vom folosi metode de sincronizare in acel segment de cod critic.



18. RO: Prin ce tranziţie de stare va trece un process când apelează pthread_cond_wait? Justificaţi răspunsul.
EN: What state transition will a process undergo when it calls pthread_cond_wait? Justify your answer.

R: Cand un proces apeleaza pthread_cond_wait, firul de executie va trece de la starea de running la starea de
wait, eliberand mutex-ul si asteptand semnalul pentru a trece in starea de ready, recapatand mutex-ul.



19. RO: Ce conţinue un fişier de tip director în sistemul de fişiere Linux?
EN: What is the content of file of type directory in the Linux file system?

R: Un fisier de tip director in sistemul de fisiere Linux contine o lista de inregistrari, fiecare asociind 
numele unui fisier sau subdirector cu i-nodul sau unic. 



20. RO: Explicaţi diferenţa dintre un link simbolic şi un link hard.
EN: Explain the difference between a symbolic link and a hard link.

R: Un link-simbolic este un fisier special care contine calea catre un alt fisier sau director, permitand
accesul indirect la acesta. Daca tinta este mutata sau stearsa, symlink-ul devine invalid.
   Un link-hard este o referinta directa la inod-ul unui fisier existent, astfel incat mai multe nume de 
fisiere pot face referire la aceeasi locatie de date pe disc. Link-urile hard sunt valide chiar dacat tinta
este mutata, dar nu pot traversa sisteme de fisiere diferite si nu pot fi create pentru directoare.


