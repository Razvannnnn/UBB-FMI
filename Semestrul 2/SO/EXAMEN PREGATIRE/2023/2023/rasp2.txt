ssh ex2079@172.30.0.9 -p22

1.
RO: Daţi trei expresii regulare care acceptă orice număr ne-negativ multiplu de 5.
EN: Give three regular expressions that match any non-negative number multiple of 5.

R:
'^[1-9]*[05]+$'
'^[1-9]*[05]{1,}$'
'^[123456789]*[05]+$'


2.
RO: Daţi cinci comenzi GREP care afişează toate liniile dintr-un fişier care conţin litera "a" mare sau mic.
EN: Give five GREP commands that display all the lines in a file that contain letter "a" uppercase or lowercase.

R:
grep -E -i 'a' file
grep -E '[aA]+' file
grep -E '[aA]{1,}' file
grep -E -i [a]{1,}' file
grep -E '[aA]' file


3.
RO: Scrieţi două comenzi SED care afişează dintr-un fişier doar liniile care nu conţin cifra 7.
EN: Write two SED commands that display from a file only the lines that do not contain digit 7.

R:
sed -n '/7/!p' file
sed '/7/d' file


4.
RO: Scrieţi o comandă AWK care afişează suma penultimului câmp al tuturor liniilor.
EN: Write an AWK command that displays the sum of the next to last field of all lines.

R:
awk 'BEGIN{suma=0} {suma+=$(NF-1)} END{print suma}' file


5.
RO: Cum puteţi redirecta în linia de comanda ieşirea de eroare prin pipe înspre un alt program?
EN: How can you redirect on the command line the standard error through pipe to another program?

R:
comanda 2>&1 | program

6.
RO: Scrieţi un script Shell UNIX care afişează toate argumentele din linia de comandă fără a folosi FOR.
EN: Write a UNIX Shell script that displays all command line arguments without using FOR

R:
#!/bin/bash

while [ $# -ne 0 ];
do
	echo'$1'
	shift
done


7.
RO: Desenati ierarhia proceselor create de coduld e mai jos, incluzand procesul parinte.
EN: Draw the hierarchy of processes created by the code below, including the parent process.

    for(i=0; i<3; i++) {
        fork();
        execlp("ls", "ls", "/", NULL);
    }

R:   P->C1
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

8.
RO: Adăugaţi codul C necesar pentru ca fişierul b.txt să fie suprascris cu conţinutul fişierului a.txt din 
instrucţiunea de mai jos.
EN: Add the necessary code so that file b.txt is overwritten with the content of file a.txt from the instruction
below.

    execlp("cat", "cat", "a.txt", NULL);

R:
int fd = open("b.txt", O_WRONLY");
dup2(fd,1);
execlp("cat", "cat", "a.txt", NULL);


9.
RO: De ce nu e recomandat sa comunicaţi bidirecţional printr-un singur FIFO?
EN: Why is it not advisable to communicate bidirectionally through a single FIFO?

R: Utilizarea unui singur FIFO pentru comunicare bidirectionala nu este recomandata pentru ca exista
riscul de deadlock si poate creste complexitatea codului.



10.
RO: Câte FIFO-uri poate deschide un process dacă nu sunt şi nici nu vor fi folosite vreodată de vreun alt proces?
EN: How many FIFOs can a process open if they are not and will not ever be used by any other process?

R: In cazul in care nu vor fi folosite niciodata de vreun alt proces, procesul poate deschide un singur FIFO, acesta asteptand pana sa fie folosit.


11.
RO: Când aţi folosi un process în locul unui thread?
EN: When would you prefer using a process instead of a thread?

R: PROCESE > THREAD
- Cand avem nevoie de comunicare intre ele
- Daca sarcinile de rezolvat sunt mai complexe
- Daca procesele trebuie sa ruleze pe masini diferite
- Daca se pune accent pe securitatea datelor (in thread-uri nu exista securitate)

12.
RO: Ce este o "secţiune critică"?
EN: What is a "critical section"?

R: O sectiune critica face referire la un segment de cod care este rulat de cate un singur proces sau thread
la un moment dat pentru a mentine integritatea datelor.


13.
RO: De ce un thread trebuie să reverifice condiţia la ieşirea din apelul pthread_cond_wait?
EN: Why should the thread recheck the condition after returning from the pthread_cond_wait call?

R: Thread-ul trebuie sa reverifice conditia la iesirea din pthread_cond_wait pentru a evita spurious wakeups.


14.
RO: Care va fi efectul înlocuirii apelurilor la pthread_mutex_lock cu apeluri la pthread_rwlock_rdlock?
EN: What will be the effect of replacing calls to pthread_mutex_lock with calls to pthread_rwlock_rdlock?

R: In primul rand, va creste complexitatea programul. RWLOCK permite fata de mutex accesul la segemntul de cod
a mai multor thread-uri, crescand performanta. 

15.
RO: Care e efectul apelului la pthread_barrier_wait pentru o barieră iniţializată cu 1?
EN: What is the effect of calling pthread_barrier_wait on a barrier initialized with 1?

R: pthread_barrier_wait fiind initializat cu 1, va astepta un singur thread iar apoi restul thread-urilor
vor trece fara probleme  =)


16.
RO: Cum puteţi incrementa valoarea unui semafor?
EN: How can you increment the value of a POSIX semaphore?

R: sem_post(&s);


17.
RO: Ce puteţi face ca programator pentru a preveni deadlock-urile?
EN: What can you do as a software developer to prevent deadlocks?

R: Stabilirea unei ordini a elementelor de sincronizare si pastrarea ordinii.


18.
RO: Prin ce tranziţie de stare va trece un process când citeşte dintr-un fişier?
EN: What state transition will a process undergo when reading from a file?

R:	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

19.
RO: Ce conţinue superblocul unui disc Linux?
EN: What is the content of the superblock on a Linux disk?

R:      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


20.RO: Se poate crea un link hard spre un fişier aflat pe o altă partiţie? Justificaţi răspunsul.
EN: Can you create a hard link towards a file on a different partition? Justify your answer.

R:Nu se poate crea un hard-link catre o alta partitie, deoarece hard-link contine numele si inodul catre fisierul
spre care pointeaza, inod-urile fiind structuri de date ce sunt folosite sa reprezinte doar fisierele din partitia 
curenta.


