     1                                  bits 32
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit               
     6                                  import exit msvcrt.dll    
     7                                  
     8                                  
     9                                  segment data use32 class=data
    10 00000000 32147586BCAD                s dw 1432h, 8675h, 0ADBCh
    11                                      l equ ($-s)/2
    12 00000006 0000<rept>                  d times l dw 0
    13 0000000C 00<rept>                    vect times 4 db 0
    14 00000010 00                          ok db 0
    15 00000011 <res 00000001>              i resb 1
    16                                  
    17                                  segment code use32 class=code
    18                                      start:
    19 00000000 BE[00000000]                    mov esi, s
    20 00000005 BF[06000000]                    mov edi, d
    21 0000000A B903000000                      mov ecx, l
    22 0000000F FC                              cld
    23                                          Repeta:
    24 00000010 83F900                              cmp ecx, 0
    25 00000013 0F84CC000000                        jz Sfarsit
    26 00000019 B800000000                          mov eax, 0
    27 0000001E 66AD                                lodsw
    28 00000020 51                                  push ecx
    29 00000021 56                                  push esi
    30 00000022 B904000000                          mov ecx, 4
    31 00000027 FC                                  cld
    32 00000028 BE[0C000000]                        mov esi, vect
    33                                              Vector:
    34 0000002D 6689C3                                  mov bx, ax
    35 00000030 6683E30F                                and bx, 0Fh
    36 00000034 881E                                    mov [esi], bl
    37 00000036 66C1E804                                shr ax, 4
    38 0000003A 46                                      inc esi
    39 0000003B E2F0                                loop Vector
    40 0000003D 5E                                  pop esi
    41 0000003E 59                                  pop ecx
    42                                              
    43 0000003F 51                                  push ecx
    44 00000040 56                                  push esi
    45 00000041 C605[10000000]01                    mov byte[ok], 1
    46                                              sortare:
    47 00000048 803D[10000000]00                        cmp byte[ok], 0
    48 0000004F 742E                                    jz afara
    49                                                  
    50 00000051 C605[10000000]00                        mov byte[ok], 0
    51 00000058 BE[0C000000]                            mov esi, vect
    52 0000005D B903000000                              mov ecx, 3
    53                                                  Sir:
    54 00000062 8A06                                        mov al, [esi]
    55 00000064 3A4601                                      cmp al, [esi+1]
    56 00000067 7F02                                        jg swap
    57 00000069 EB0F                                        jmp altfel
    58                                                      
    59                                                      swap:
    60 0000006B 8A5E01                                          mov bl, [esi+1]
    61 0000006E 881E                                            mov [esi], bl
    62 00000070 884601                                          mov [esi+1], al
    63 00000073 C605[10000000]01                                mov byte[ok], 1
    64                                                      altfel:
    65 0000007A 46                                              inc esi
    66 0000007B E2E5                                    loop Sir
    67 0000007D EBC9                                jmp sortare
    68                                              
    69                                              afara:
    70 0000007F 5E                                  pop esi
    71 00000080 59                                  pop ecx
    72                                              
    73 00000081 51                                  push ecx
    74 00000082 56                                  push esi
    75 00000083 B904000000                          mov ecx, 4
    76 00000088 66B80000                            mov ax, 0
    77 0000008C 66BB0000                            mov bx, 0
    78 00000090 BE[0C000000]                        mov esi, vect
    79                                              numar_nou:
    80 00000095 66C1E304                                shl bx, 4
    81 00000099 AC                                      lodsb
    82 0000009A 6609C3                                  or bx, ax
    83 0000009D E2F6                                loop numar_nou
    84                                              
    85 0000009F 6689D8                              mov ax, bx
    86 000000A2 59                                  pop ecx
    87 000000A3 5E                                  pop esi
    88                                              
    89                                              
    90 000000A4 6689C3                              mov bx, ax
    91 000000A7 B800000000                          mov eax, 0
    92                                              
    93 000000AC 51                                  push ecx
    94 000000AD B904000000                          mov ecx, 4
    95 000000B2 C605[11000000]00                    mov byte[i], 0
    96                                              
    97                                              Repeta1:
    98 000000B9 BA00000000                              mov edx, 0
    99 000000BE 6689DA                                  mov dx, bx
   100 000000C1 6683E20F                                and dx, 0Fh
   101                                                  
   102 000000C5 51                                      push ecx
   103 000000C6 8A0D[11000000]                          mov cl, [i]
   104 000000CC D3E2                                    shl edx, cl
   105 000000CE 59                                      pop ecx
   106 000000CF 09D0                                    or eax, edx
   107                                                  
   108 000000D1 66C1EB04                                shr bx, 4
   109 000000D5 8005[11000000]08                        add byte[i], 8
   110 000000DC E2DB                                loop Repeta1
   111                                              
   112 000000DE AB                                  stosd
   113 000000DF 59                                  pop ecx
   114 000000E0 E92BFFFFFF                      jmp Repeta
   115                                          
   116                                          Sfarsit:
   117 000000E5 6A00                            push    dword 0
   118 000000E7 FF15[00000000]                  call    [exit]
