     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 07                          a db 7
    14 00000001 1000                        b dw 16
    15 00000003 17000000                    c dd 23
    16 00000007 3200000000000000            d dq 50
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ;  (c+d-a)-(d-c)-b  ; a - byte, b - word, c - double word, d - qword - Interpretare cu semn ; rezultat = 23
    22                                          
    23 00000000 A1[03000000]                    mov eax,[c]
    24 00000005 99                              cdq
    25 00000006 0305[07000000]                  add eax, [d]
    26 0000000C 1315[0B000000]                  adc edx, [d+4]
    27 00000012 89C3                            mov ebx,eax
    28 00000014 89D1                            mov ecx,edx
    29 00000016 A0[00000000]                    mov al,[a]
    30 0000001B 6698                            cbw
    31 0000001D 98                              cwde
    32 0000001E 99                              cdq
    33 0000001F 29C3                            sub ebx,eax
    34 00000021 19D1                            sbb ecx,edx
    35 00000023 89D8                            mov eax,ebx
    36 00000025 89CA                            mov edx,ecx
    37 00000027 52                              push(edx) 
    38 00000028 50                              push(eax) ;(c+d-a) se afla in stiva
    39 00000029 8B1D[07000000]                  mov ebx, [d]
    40 0000002F 8B0D[0B000000]                  mov ecx, [d+4]
    41 00000035 A1[03000000]                    mov eax, [c]
    42 0000003A 99                              cdq
    43 0000003B 29C3                            sub ebx,eax
    44 0000003D 19D1                            sbb ecx,edx ; ecx:ebx=(d-c)
    45 0000003F 58                              pop(eax)
    46 00000040 5A                              pop(edx)
    47 00000041 29D8                            sub eax,ebx
    48 00000043 19CA                            sbb edx,ecx ; edx:eax=(c+d-a)-(d-c)
    49 00000045 89C3                            mov ebx, eax
    50 00000047 89D1                            mov ecx, edx
    51 00000049 66A1[01000000]                  mov ax, [b]
    52 0000004F 98                              cwde
    53 00000050 99                              cdq
    54 00000051 29C3                            sub ebx,eax
    55 00000053 19D1                            sbb ecx,edx
    56 00000055 89D8                            mov eax,ebx
    57 00000057 89CA                            mov edx,ecx
    58                                               
    59                                      
    60                                          ; exit(0)
    61 00000059 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 0000005B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
