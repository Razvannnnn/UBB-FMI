     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 05                          a db 5
    14 00000001 0B000000                    b dd 11
    15 00000005 05                          c db 5
    16 00000006 1900000000000000            x dq 25
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; x-(a*a+b)/(a+c/a); a,c-byte; b-doubleword; x-qword ; Interpretare fara semn ; rezultat 19
    22                                          
    23                                          ; mov al, [a]
    24                                          ; mov bl, [a]
    25                                          ; mul bl ; ax=a*a
    26                                          ; mov bx, 0
    27                                          ; mov cx, 0
    28                                          ; mov bx, ax ; ebx=a*a
    29                                          ; mov ax, [b]
    30                                          ; mov dx, [b+2]
    31                                          ; add ax, bx ; dx:ax=a*a+b
    32                                          ; adc dx, cx
    33                                          ; push dx
    34                                          ; push ax
    35                                          ; mov ah, 0
    36                                          ; mov al, [c]
    37                                          ; mov bl, [a]
    38                                          ; div bl ; ax/bl=al=c/a
    39                                          ; add al, [a] ; al=a+c/a
    40                                          ; mov bh, 0
    41                                          ; mov bl, al ; bx=a+c/a;
    42                                          ; pop eax
    43                                          ; div bx; ax=(a*a+b)/(a+c/a)
    44                                          ; mov ebx, 0
    45                                          ; mov bx, ax
    46                                          ; mov ecx, 0 ; ecx:ebx=(a*a+b)/(a+c/a)
    47                                          ; mov eax, [x]
    48                                          ; mov edx, [x+4] ; edx:eax=x
    49                                          ; sub eax, ebx
    50                                          ; sbb edx, ecx ; edx:eax=x-(a*a+b)/(a+c/a)
    51                                          
    52                                          ; x-(a*a+b)/(a+c/a); a,c-byte; b-doubleword; x-qword ; Interpretare cu semn
    53                                          
    54                                          
    55 00000000 A0[00000000]                    mov al, [a]
    56 00000005 8A1D[00000000]                  mov bl, [a]
    57 0000000B F6EB                            imul bl ; ax=a*a
    58 0000000D 668B1D[01000000]                mov bx, [b]
    59 00000014 668B0D[03000000]                mov cx, [b+2]
    60 0000001B 6699                            cwd
    61 0000001D 6601D8                          add ax, bx 
    62 00000020 6611CA                          adc dx, cx ; dx:ax=a*a+b
    63 00000023 6652                            push(dx)
    64 00000025 6650                            push(ax)
    65 00000027 A0[05000000]                    mov al, [c]
    66 0000002C 6698                            cbw
    67 0000002E 8A1D[00000000]                  mov bl, [a]
    68 00000034 F6FB                            idiv bl ; al=c/a si ah=c%a*a
    69 00000036 0205[00000000]                  add al, [a] ; al=a+c/a
    70 0000003C 6698                            cbw
    71 0000003E 6689C3                          mov bx, ax
    72 00000041 58                              pop(eax)
    73 00000042 66F7FB                          idiv bx ; ax=(a*a+b)/(a+c/a)
    74 00000045 6699                            cwd
    75 00000047 99                              cdq
    76 00000048 89C3                            mov ebx, eax
    77 0000004A 89D1                            mov ecx, edx ; ecx:ebx=(a*a+b)/(a+c/a)
    78 0000004C A1[06000000]                    mov eax, [x]
    79 00000051 8B15[0A000000]                  mov edx, [x+4] ; edx:eax=x
    80 00000057 29D8                            sub eax, ebx
    81 00000059 19CA                            sbb edx, ecx ; edx:eax=x-(a*a+b)/(a+c/a)
    82                                          
    83                                      
    84                                          ; exit(0)
    85 0000005B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    86 0000005D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
