     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                  
    14 00000000 0F                          a db 15 
    15 00000001 0E00                        b dw 14
    16 00000003 28000000                    c dd 40
    17 00000007 1500000000000000            d dq 21
    18                                      
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ;(c+c-a)-(d+d)-b = 9 ; Interpretare fara semn 
    23                                          
    24 00000000 BB00000000                      mov ebx, 0
    25 00000005 8A1D[00000000]                  mov bl, [a]
    26 0000000B A1[03000000]                    mov eax, [c]
    27 00000010 0305[03000000]                  add eax, [c]
    28 00000016 29D8                            sub eax, ebx ; eax=c+c-a
    29 00000018 50                              push(eax)
    30 00000019 A1[07000000]                    mov eax, [d]
    31 0000001E 0305[07000000]                  add eax, [d]
    32 00000024 8B15[0B000000]                  mov edx, [d+4]
    33 0000002A 1315[0B000000]                  adc edx, [d+4] ; edx:eax=d+d
    34 00000030 5B                              pop(ebx)
    35 00000031 B900000000                      mov ecx, 0
    36 00000036 29C3                            sub ebx, eax
    37 00000038 19D1                            sbb ecx, edx ; ecx:ebx=(c+c-a)-(d+d)
    38 0000003A B800000000                      mov eax, 0
    39 0000003F 66A1[01000000]                  mov ax, [b]
    40 00000045 BA00000000                      mov edx, 0
    41 0000004A 29C3                            sub ebx, eax
    42 0000004C 19D1                            sbb ecx, edx ; ecx:ebx=(c+c-a)-(d+d)-b
    43 0000004E 89D8                            mov eax, ebx
    44 00000050 89CA                            mov edx, ecx
    45                                      
    46                                          ; exit(0)
    47 00000052 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 00000054 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
